import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;

import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;

import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-07-13T18:42:47.172-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 24 tests
 * <br>
 * Covered targets: 422
 * <br>
 * Used time: 1h 3m 16s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test1h {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 2687L)
                .d("NAME", "\"qkq\"")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/qkq")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("qkq"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/swagger.json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'swagger'", containsString("2.0"))
                .body("'info'.'version'", containsString("1.0"))
                .body("'basePath'", containsString("/"))
                .body("'schemes'.size()", equalTo(1))
                .body("'schemes'", hasItems("http"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'operationId'", containsString("getConfigurationActivedFeatures"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'.size()", equalTo(4))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[2].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[2].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[2].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[2].'type'", containsString("string"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'responses'.'200'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'responses'.'200'.'schema'.'items'.'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'operationId'", containsString("addFeatureToConfiguration"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'.size()", equalTo(5))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[2].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[2].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[2].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[2].'type'", containsString("string"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'operationId'", containsString("deleteFeature"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'.size()", equalTo(5))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[2].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[2].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[2].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[2].'type'", containsString("string"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'operationId'", containsString("getConfigurationsForProduct"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'responses'.'200'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'responses'.'200'.'schema'.'items'.'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'operationId'", containsString("getConfigurationWithNameForProduct"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/ProductConfiguration"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'operationId'", containsString("addConfiguration"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'operationId'", containsString("deleteConfiguration"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'operationId'", containsString("addRequiresConstraintToProduct"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[1].'name'", containsString("sourceFeature"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[1].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[1].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[2].'name'", containsString("requiredFeature"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[2].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[2].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[2].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'operationId'", containsString("addExcludesConstraintToProduct"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[1].'name'", containsString("sourceFeature"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[1].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[1].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[2].'name'", containsString("excludedFeature"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[2].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[2].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[2].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'operationId'", containsString("deleteConstraint"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'name'", containsString("constraintId"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'type'", containsString("integer"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'format'", containsString("int64"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/features'.'get'.'operationId'", containsString("getFeaturesForProduct"))
                .body("'paths'.'/products/{productName}/features'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'schema'.'uniqueItems'", equalTo(true))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'schema'.'items'.'$ref'", containsString("#/definitions/Feature"))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'operationId'", containsString("addFeatureToProduct"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[1].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[2].'name'", containsString("description"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[2].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[2].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[2].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'operationId'", containsString("updateFeatureOfProduct"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[1].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[2].'name'", containsString("description"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[2].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[2].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[2].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Feature"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'operationId'", containsString("deleteFeatureOfProduct"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[1].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products'.'get'.'operationId'", containsString("getAllProducts"))
                .body("'paths'.'/products'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products'.'get'.'parameters'.size()", equalTo(0))
                .body("'paths'.'/products'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products'.'get'.'responses'.'200'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/products'.'get'.'responses'.'200'.'schema'.'items'.'type'", containsString("string"))
                .body("'paths'.'/products'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}'.'get'.'operationId'", containsString("getProductByName"))
                .body("'paths'.'/products/{productName}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Product"))
                .body("'paths'.'/products/{productName}'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}'.'post'.'operationId'", containsString("addProduct"))
                .body("'paths'.'/products/{productName}'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}'.'delete'.'operationId'", containsString("deleteProductByName"))
                .body("'paths'.'/products/{productName}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'definitions'.'ProductsConfigurationResource'.'type'", containsString("object"))
                .body("'definitions'.'ProductsConfigurationFeaturesResource'.'type'", containsString("object"))
                .body("'definitions'.'Feature'.'type'", containsString("object"))
                .body("'definitions'.'Feature'.'properties'.'name'.'type'", containsString("string"))
                .body("'definitions'.'Feature'.'properties'.'description'.'type'", containsString("string"))
                .body("'definitions'.'ProductConfiguration'.'type'", containsString("object"))
                .body("'definitions'.'ProductConfiguration'.'properties'.'name'.'type'", containsString("string"))
                .body("'definitions'.'ProductConfiguration'.'properties'.'valid'.'type'", containsString("boolean"))
                .body("'definitions'.'ProductConfiguration'.'properties'.'activedFeatures'.'type'", containsString("array"))
                .body("'definitions'.'ProductConfiguration'.'properties'.'activedFeatures'.'uniqueItems'", equalTo(true))
                .body("'definitions'.'ProductConfiguration'.'properties'.'activedFeatures'.'items'.'$ref'", containsString("#/definitions/Feature"))
                .body("'definitions'.'ProductsConstraintsResource'.'type'", containsString("object"))
                .body("'definitions'.'ProductsFeaturesResource'.'type'", containsString("object"))
                .body("'definitions'.'FeatureConstraint'.'type'", containsString("object"))
                .body("'definitions'.'FeatureConstraint'.'properties'.'type'.'type'", containsString("string"))
                .body("'definitions'.'Product'.'type'", containsString("object"))
                .body("'definitions'.'Product'.'properties'.'name'.'type'", containsString("string"))
                .body("'definitions'.'Product'.'properties'.'features'.'type'", containsString("array"))
                .body("'definitions'.'Product'.'properties'.'features'.'readOnly'", equalTo(true))
                .body("'definitions'.'Product'.'properties'.'features'.'uniqueItems'", equalTo(true))
                .body("'definitions'.'Product'.'properties'.'features'.'items'.'$ref'", containsString("#/definitions/Feature"))
                .body("'definitions'.'Product'.'properties'.'constraints'.'type'", containsString("array"))
                .body("'definitions'.'Product'.'properties'.'constraints'.'readOnly'", equalTo(true))
                .body("'definitions'.'Product'.'properties'.'constraints'.'uniqueItems'", equalTo(true))
                .body("'definitions'.'Product'.'properties'.'constraints'.'items'.'$ref'", containsString("#/definitions/FeatureConstraint"));
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 115L)
                .d("NAME", "\"d\"")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/d/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 69L)
                .d("NAME", "\"kVqrcivVMDM\"")
            .and().insertInto("FEATURE", 68L)
                .d("NAME", "\"pf0l64mJkiDY_jFc\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 71L)
                .d("NAME", "\"1rUXZjhPiAt\"")
            .and().insertInto("FEATURE", 70L)
                .d("NAME", "\"Eo\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 76L)
                .d("NAME", "\"K8WKHnNW8MO\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 75L)
                .d("NAME", "\"SRkePy36LxWMHlHR\"")
            .and().insertInto("PRODUCT", 74L)
                .d("NAME", "\"7GgzFmwvg\"")
            .and().insertInto("FEATURE", 73L)
                .d("NAME", "\"HfGpFExx\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 72L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 81L)
                .d("NAME", "\"m3RpoBAe\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 80L)
                .d("NAME", "\"ch9DD6BfL3\"")
            .and().insertInto("PRODUCT", 79L)
                .d("NAME", "\"lS4XqAZDMYra7P\"")
            .and().insertInto("FEATURE", 78L)
                .d("NAME", "\"h2R6si3Igvp\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 77L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 86L)
                .d("NAME", "\"T2\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 85L)
                .d("NAME", "\"KUY7ZEsFgyri\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"S9\"")
            .and().insertInto("FEATURE", 83L)
                .d("NAME", "\"wH3WDn\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 82L)
                .r("IN_CONFIGURATIONS_ID", 85L)
                .r("ACTIVED_FEATURES_ID", 83L)
            .and().insertInto("PRODUCT", 91L)
                .d("NAME", "\"q\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 90L)
                .d("NAME", "\"S_sSH\"")
            .and().insertInto("PRODUCT", 89L)
                .d("NAME", "\"Jm\"")
            .and().insertInto("FEATURE", 88L)
                .d("NAME", "\"xGRa9OsHES0p\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 87L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(10))
                .body("", hasItems("kVqrcivVMDM", "1rUXZjhPiAt", "K8WKHnNW8MO", "7GgzFmwvg", "m3RpoBAe", "lS4XqAZDMYra7P", "T2", "S9", "q", "Jm"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/zrvMcl")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/zrvMcl")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("zrvMcl"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/KHjD_GjCsUhDz")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/KHjD_GjCsUhDz/configurations/xuGqdOCF"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/KHjD_GjCsUhDz/configurations/xuGqdOCF"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("xuGqdOCF"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 705L)
                .d("NAME", "\"9e1WSfsygkpuijt4\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 704L)
                .d("NAME", "\"NOk6ym\"")
            .and().insertInto("PRODUCT", 707L)
                .d("NAME", "\"VolDEjOo6ZXA\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 706L)
                .d("NAME", "\"_WqPQ3j0p\"")
            .and().insertInto("PRODUCT", 709L)
                .d("NAME", "\"Yg8A1BtB\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 708L)
                .d("NAME", "\"7W8\"")
            .and().insertInto("PRODUCT", 711L)
                .d("NAME", "\"EQM\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 710L)
                .d("NAME", "\"jpGk5SKtt4r728\"")
            .and().insertInto("PRODUCT", 713L)
                .d("NAME", "\"XFV5U\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 712L)
                .d("NAME", "\"P9MFzT1k\"")
            .and().insertInto("PRODUCT", 782L)
                .d("NAME", "\"CTnB\"")
            .and().insertInto("FEATURE", 781L)
                .d("NAME", "\"\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 784L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 783L)
                .d("NAME", "\"Daq\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/d6")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("d6"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/d6")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/d6/configurations/AKE"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_configurationName, baseUrlOfSut + "/products/d6/configurations"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("AKE"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/d6/configurations/AKE/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        String location_productName = "";
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 17256L)
                .d("NAME", "\"T0NeZ0bhaIY\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 17255L)
                .d("NAME", "\"0Owb110rviK8Rm\"")
                .d("VALID", "false")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/T0NeZ0bhaIY")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/T0NeZ0bhaIY/configurations/0Owb110rviK8Rm"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/T0NeZ0bhaIY")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/T0NeZ0bhaIY/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/T0NeZ0bhaIY/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/T0NeZ0bhaIY")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/T0NeZ0bhaIY")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/T0NeZ0bhaIY")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/T0NeZ0bhaIY/constraints/514"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/T0NeZ0bhaIY/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/5_V0HHJhTt5YJzaf/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/3Y1UbuFk8HQ9m")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/3Y1UbuFk8HQ9m/features/u5pyR"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/3Y1UbuFk8HQ9m/features/u5pyR"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("u5pyR"))
                .body("'description'", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 69L)
                .d("NAME", "\"kVqrcivVMDM\"")
            .and().insertInto("FEATURE", 68L)
                .d("NAME", "\"_EM_792_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 71L)
                .d("NAME", "\"1rUXZjhPiAt\"")
            .and().insertInto("FEATURE", 70L)
                .d("NAME", "\"Eo\"")
                .r("PRODUCT_ID", 69L)
            .and().insertInto("PRODUCT", 76L)
                .d("NAME", "\"_EM_793_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 75L)
                .d("NAME", "\"_EM_794_XYZ_\"")
            .and().insertInto("PRODUCT", 74L)
                .d("NAME", "\"_EM_795_XYZ_\"")
            .and().insertInto("FEATURE", 73L)
                .d("NAME", "\"HfGpFExx\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 72L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 81L)
                .d("NAME", "\"m3RpoBAe\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 80L)
                .d("NAME", "\"ch9DD6BfL3H\"")
            .and().insertInto("PRODUCT", 79L)
                .d("NAME", "\"lS4XqAZDMYra7P\"")
            .and().insertInto("FEATURE", 78L)
                .d("NAME", "\"h2R6si3Igvp\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 77L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 86L)
                .d("NAME", "\"_EM_796_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 85L)
                .d("NAME", "\"KUY7ZEsFgyr\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"S9\"")
            .and().insertInto("FEATURE", 83L)
                .d("NAME", "\"_EM_797_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 82L)
                .r("IN_CONFIGURATIONS_ID", 85L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .and().insertInto("PRODUCT", 91L)
                .d("NAME", "\"_EM_798_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 90L)
                .d("NAME", "\"S_sSH\"")
            .and().insertInto("PRODUCT", 89L)
                .d("NAME", "\"Jm\"")
            .and().insertInto("FEATURE", 88L)
                .d("NAME", "\"xGRa9OsHES0p\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 87L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/UDj3OnHTGiiuRXp")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/UDj3OnHTGiiuRXp/features/s4M"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("description=gmPi00nedfO")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/UDj3OnHTGiiuRXp/features/s4M"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("s4M"))
                .body("'description'", containsString("gmPi00nedfO"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/UDj3OnHTGiiuRXp")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/UDj3OnHTGiiuRXp/configurations/dLJ4PM3"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/UDj3OnHTGiiuRXp/features/s4M"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/UDj3OnHTGiiuRXp/configurations/dLJ4PM3/features/s4M"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/UDj3OnHTGiiuRXp/configurations/dLJ4PM3/features/s4M"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/wUUo7Astbjp3nOdF")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/wUUo7Astbjp3nOdF/configurations/H6O1YpuXo"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 69L)
                .d("NAME", "\"kVqrcivVMDM\"")
            .and().insertInto("FEATURE", 68L)
                .d("NAME", "\"_EM_1745_XYZ_\"")
                .r("PRODUCT_ID", 69L)
            .and().insertInto("PRODUCT", 71L)
                .d("NAME", "\"1rUXZjhPiAt\"")
            .and().insertInto("FEATURE", 70L)
                .d("NAME", "\"_EM_1746_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 76L)
                .d("NAME", "\"_EM_1449_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 75L)
                .d("NAME", "\"_EM_1747_XYZ_\"")
            .and().insertInto("PRODUCT", 74L)
                .d("NAME", "\"7GgzFmwvg\"")
            .and().insertInto("FEATURE", 73L)
                .d("NAME", "\"_EM_1748_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 72L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .and().insertInto("PRODUCT", 81L)
                .d("NAME", "\"_EM_1450_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 80L)
                .d("NAME", "\"_EM_1749_XYZ_\"")
            .and().insertInto("PRODUCT", 79L)
                .d("NAME", "\"lS4XqAZDMYra7P\"")
            .and().insertInto("FEATURE", 78L)
                .d("NAME", "\"37486\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 77L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 78L)
            .and().insertInto("PRODUCT", 86L)
                .d("NAME", "\"T2\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 85L)
                .d("NAME", "\"_EM_1750_XYZ_\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"S9\"")
            .and().insertInto("FEATURE", 83L)
                .d("NAME", "\"9oK\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 82L)
                .r("IN_CONFIGURATIONS_ID", 85L)
                .r("ACTIVED_FEATURES_ID", 78L)
            .and().insertInto("PRODUCT", 91L)
                .d("NAME", "\"_EM_1454_XYZ_Z\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 90L)
                .d("NAME", "\"S_sSH\"")
            .and().insertInto("PRODUCT", 89L)
                .d("NAME", "\"Jm\"")
            .and().insertInto("FEATURE", 88L)
                .d("NAME", "\"_EM_1751_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 87L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/kVqrcivVMDM")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=nDlh9vU2CzJE")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/kVqrcivVMDM/features/niTMOOiDuw8"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/kVqrcivVMDM/features/niTMOOiDuw8"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/Kd9")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Kd9/configurations/DmyI423yd7"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/Kd9/configurations/DmyI423yd7"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/dWIEf4vx7eP")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/dWIEf4vx7eP")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/D5hNGVO1hdoO")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/O8Ow")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/O8Ow/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/zS")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/zS/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/IICPIEo659zy2V")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/IICPIEo659zy2V/features/MUqeEsERn"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/IICPIEo659zy2V/features/MUqeEsERn"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/ztM2Mi243uOjGQ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=cW6enLoqlT6Jx")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ztM2Mi243uOjGQ/features/RmYEA7PfMQ4kSb9o"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 476L)
                .d("NAME", "\"5GO7g78LGTV\"")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/5GO7g78LGTV")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/2O/configurations/WNBdTbxkHte7")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/GWNbFpF8_GcWUZ/constraints/192")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }


}
