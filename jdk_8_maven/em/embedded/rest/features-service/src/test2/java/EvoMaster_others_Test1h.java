import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;

import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;

import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-07-13T18:42:47.194-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 7 tests
 * <br>
 * Covered targets: 38
 * <br>
 * Used time: 1h 3m 16s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test1h {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2689L)
                .d("NAME", "\"_EM_3031_XYZ_5\"")
            .and().insertInto("FEATURE", 2688L)
                .d("NAME", "\"_EM_3034_XYZ_\"")
                .r("PRODUCT_ID", 2689L)
            .and().insertInto("PRODUCT", 2694L)
                .d("NAME", "\"_EM_3031_XYZ_5\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2693L)
                .d("NAME", "\"Qj3\"")
            .and().insertInto("PRODUCT", 2692L)
                .d("NAME", "\"y\\Qvhp6Z2\"")
            .and().insertInto("FEATURE", 2691L)
                .d("NAME", "\"kBJfDoyXsHDjBoW\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2690L)
                .r("IN_CONFIGURATIONS_ID", 2693L)
                .r("ACTIVED_FEATURES_ID", 2691L)
            .and().insertInto("PRODUCT", 2699L)
                .d("NAME", "\"_EM_15183_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2698L)
                .d("NAME", "\"_EM_3037_XYZ_\"")
            .and().insertInto("PRODUCT", 2697L)
                .d("NAME", "\"_EM_3038_XYZ_\"")
            .and().insertInto("FEATURE", 2696L)
                .d("NAME", "\"_EM_15184_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2695L)
                .r("IN_CONFIGURATIONS_ID", 2698L)
                .r("ACTIVED_FEATURES_ID", 2691L)
            .and().insertInto("PRODUCT", 2704L)
                .d("NAME", "\"UUU_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2703L)
                .d("NAME", "\"_EM_15185_XYZ_\"")
            .and().insertInto("PRODUCT", 2702L)
                .d("NAME", "\"8tk8zfvbh\"")
            .and().insertInto("FEATURE", 2701L)
                .d("NAME", "\"_EM_3039_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2700L)
                .r("IN_CONFIGURATIONS_ID", 2703L)
                .r("ACTIVED_FEATURES_ID", 2691L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/UkahZk4yXfWHUmJQ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("UkahZk4yXfWHUmJQ"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
        
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/y%5CQvhp6Z2")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 69L)
                .d("NAME", "\"kVqrcivVMDM\"")
            .and().insertInto("FEATURE", 68L)
                .d("NAME", "\"iXi\"")
                .r("PRODUCT_ID", 69L)
            .and().insertInto("PRODUCT", 71L)
                .d("NAME", "\"_EM_6906_XYZ_\"")
            .and().insertInto("FEATURE", 70L)
                .d("NAME", "\"Eo\"")
                .r("PRODUCT_ID", 71L)
            .and().insertInto("PRODUCT", 76L)
                .d("NAME", "\"UDj3OnHTGiiuRXp\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 75L)
                .d("NAME", "\"A0z9\"")
            .and().insertInto("PRODUCT", 74L)
                .d("NAME", "\"LT1qu\"")
            .and().insertInto("FEATURE", 73L)
                .d("NAME", "\"_EM_6907_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 72L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .and().insertInto("PRODUCT", 81L)
                .d("NAME", "\"m3RpoBAe\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 80L)
                .d("NAME", "\"ch9DD6BfL3H\"")
            .and().insertInto("PRODUCT", 79L)
                .d("NAME", "\"lS4XqAZDMYra7P\"")
            .and().insertInto("FEATURE", 78L)
                .d("NAME", "\"_EM_6908_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 77L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 86L)
                .d("NAME", "\"_EM_796_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 85L)
                .d("NAME", "\"KUY7ZEsFgyr\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"S9\"")
            .and().insertInto("FEATURE", 83L)
                .d("NAME", "\"_EM_797_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 82L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 83L)
            .and().insertInto("PRODUCT", 91L)
                .d("NAME", "\"_EM_6909_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 90L)
                .d("NAME", "\"_EM_6910_XYZ_\"")
            .and().insertInto("PRODUCT", 89L)
                .d("NAME", "\"Jm\"")
            .and().insertInto("FEATURE", 88L)
                .d("NAME", "\"xGRa9OsHES0p\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 87L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .and().insertInto("PRODUCT", 6043L)
                .d("NAME", "\"7H9NCt\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 6042L)
                .d("ID", "0")
            .and().insertInto("PRODUCT", 6045L)
                .d("NAME", "\"WzRs\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 6044L)
                .d("ID", "-302018322022083549")
            .and().insertInto("PRODUCT", 6047L)
                .d("NAME", "\"_EM_6911_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 6046L)
                .d("ID", "268435888")
            .and().insertInto("PRODUCT", 6049L)
                .d("NAME", "\"XWLbKhY\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 6048L)
                .d("ID", "4194868")
            .and().insertInto("PRODUCT", 6051L)
                .d("NAME", "\"ajJ9cYoItkKcXy\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 6050L)
                .d("ID", "0")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_6903_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_6903_XYZ_/constraints/317"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_6903_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=c")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_6903_XYZ_/features/_EM_6905_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("description=gmPi00nedfO")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_6903_XYZ_/features/_EM_6905_XYZ_"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EM_6905_XYZ_"))
                .body("'description'", containsString("gmPi00nedfO"));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_6903_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_6903_XYZ_/configurations/%5CLJ4PM3"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 69L)
                .d("NAME", "\"kVqrcivVMDM\"")
            .and().insertInto("FEATURE", 68L)
                .d("NAME", "\"_EM_5615_XYZ_\"")
                .r("PRODUCT_ID", 69L)
            .and().insertInto("PRODUCT", 71L)
                .d("NAME", "\"_EM_9473_XYZ_\"")
            .and().insertInto("FEATURE", 70L)
                .d("NAME", "\"Eo\"")
                .r("PRODUCT_ID", 69L)
            .and().insertInto("PRODUCT", 76L)
                .d("NAME", "\"_EM_793_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 75L)
                .d("NAME", "\"22292\"")
            .and().insertInto("PRODUCT", 74L)
                .d("NAME", "\"IS\"")
            .and().insertInto("FEATURE", 73L)
                .d("NAME", "\"_EM_9474_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 72L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 81L)
                .d("NAME", "\"m3RpoBAe\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 80L)
                .d("NAME", "\"cU9DDUUUL3H\"")
            .and().insertInto("PRODUCT", 79L)
                .d("NAME", "\"_EM_5616_XYZ_\"")
            .and().insertInto("FEATURE", 78L)
                .d("NAME", "\"h2R6si3Igvp\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 77L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .and().insertInto("PRODUCT", 86L)
                .d("NAME", "\"_EM_796_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 85L)
                .d("NAME", "\"KUY7ZEsFgyr\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"_EM_5617_XYZ_\"")
            .and().insertInto("FEATURE", 83L)
                .d("NAME", "\"_EM_9475_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 82L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 73L)
            .and().insertInto("PRODUCT", 91L)
                .d("NAME", "\"6\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 90L)
                .d("NAME", "\"_EM_5618_XYZ_\"")
            .and().insertInto("PRODUCT", 89L)
                .d("NAME", "\"_EM_9476_XYZ_\"")
            .and().insertInto("FEATURE", 88L)
                .d("NAME", "\"oUU_5UA9UXUU_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 87L)
                .r("IN_CONFIGURATIONS_ID", 85L)
                .r("ACTIVED_FEATURES_ID", 88L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/E8WwlnEqZzTGi")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/E8WwlnEqZzTGi/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/E8WwlnEqZzTGi")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/E8WwlnEqZzTGi/features/7F7cV51d6bPlzDQ"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/E8WwlnEqZzTGi/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/E8WwlnEqZzTGi")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("E8WwlnEqZzTGi"))
                .body("'features'.size()", equalTo(1))
                .body("'features'[0].'name'", containsString("7F7cV51d6bPlzDQ"))
                .body("'features'[0].'description'", nullValue())
                .body("'constraints'.size()", equalTo(1))
                .body("'constraints'[0].'sourceFeatureName'", nullValue())
                .body("'constraints'[0].'excludedFeatureName'", nullValue())
                .body("'constraints'[0].'type'", containsString("excludes"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 69L)
                .d("NAME", "\"ONwI5uHilKKUh\"")
            .and().insertInto("FEATURE", 68L)
                .d("NAME", "\"BCnqudDOjXd1F4o\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 71L)
                .d("NAME", "\"_EM_17482_XYZ_\"")
            .and().insertInto("FEATURE", 70L)
                .d("NAME", "\"Eo\"")
                .r("PRODUCT_ID", 69L)
            .and().insertInto("PRODUCT", 76L)
                .d("NAME", "\"ONwI5uHilKKUh\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 75L)
                .d("NAME", "\"xcCXO92ZwP\"")
            .and().insertInto("PRODUCT", 74L)
                .d("NAME", "\"_EM_795_XYZ_\"")
            .and().insertInto("FEATURE", 73L)
                .d("NAME", "\"HfGpFExx\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 72L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 81L)
                .d("NAME", "\"199507\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 80L)
                .d("NAME", "\"ch9DD6BfL3H\"")
            .and().insertInto("PRODUCT", 79L)
                .d("NAME", "\"lS4XqAZDMYra7Pp\"")
            .and().insertInto("FEATURE", 78L)
                .d("NAME", "\"_EM_10561_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 77L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 86L)
                .d("NAME", "\"cDSLwSb\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 85L)
                .d("NAME", "\"_EM_9210_XYZ_\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"_EM_17483_XYZ_\"")
            .and().insertInto("FEATURE", 83L)
                .d("NAME", "\"38184\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 82L)
                .r("IN_CONFIGURATIONS_ID", 85L)
                .r("ACTIVED_FEATURES_ID", 73L)
            .and().insertInto("PRODUCT", 91L)
                .d("NAME", "\"cDSLwSb\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 90L)
                .d("NAME", "\"_EM_17484_XYZ_\"")
            .and().insertInto("PRODUCT", 89L)
                .d("NAME", "\"NU\"")
            .and().insertInto("FEATURE", 88L)
                .d("NAME", "\"_EM_17485_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 87L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_17481_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=_EM_10557_XYZ_&excludedFeature=hEDwDXs6efqi6HF")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_17481_XYZ_/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_17481_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=m31WqEOoN")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_17481_XYZ_/features/CUU%5B%5CV253gUDU_"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/YPH7oBArT")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/YPH7oBArT/features/UQsk1oYUWvoLmtG"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/YPH7oBArT/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 69L)
                .d("NAME", "\"kVqrcivVMDM\"")
            .and().insertInto("FEATURE", 68L)
                .d("NAME", "\"_EM_792_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 71L)
                .d("NAME", "\"1rUXZjhPiAt\"")
            .and().insertInto("FEATURE", 70L)
                .d("NAME", "\"Eo\"")
                .r("PRODUCT_ID", 69L)
            .and().insertInto("PRODUCT", 76L)
                .d("NAME", "\"_EM_793_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 75L)
                .d("NAME", "\"_EM_794_XYZ_\"")
            .and().insertInto("PRODUCT", 74L)
                .d("NAME", "\"_EM_795_XYZ_\"")
            .and().insertInto("FEATURE", 73L)
                .d("NAME", "\"HfGpFExx\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 72L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 81L)
                .d("NAME", "\"m3RpoBAe\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 80L)
                .d("NAME", "\"ch9DD6BfL3H\"")
            .and().insertInto("PRODUCT", 79L)
                .d("NAME", "\"lS4XqAZDMYra7P\"")
            .and().insertInto("FEATURE", 78L)
                .d("NAME", "\"h2R6si3Igvp\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 77L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 86L)
                .d("NAME", "\"_EM_796_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 85L)
                .d("NAME", "\"KUY7ZEsFgyr\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"S9\"")
            .and().insertInto("FEATURE", 83L)
                .d("NAME", "\"_EM_797_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 82L)
                .r("IN_CONFIGURATIONS_ID", 85L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .and().insertInto("PRODUCT", 91L)
                .d("NAME", "\"_EM_798_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 90L)
                .d("NAME", "\"S_sSH\"")
            .and().insertInto("PRODUCT", 89L)
                .d("NAME", "\"Jm\"")
            .and().insertInto("FEATURE", 88L)
                .d("NAME", "\"xGRa9OsHES0p\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 87L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/RJfxpLYislXtZEL")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/RJfxpLYislXtZEL/features/6OLlLkXFPmW"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/RJfxpLYislXtZEL/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/RJfxpLYislXtZEL")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/RJfxpLYislXtZEL/configurations/Dry"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=5eVBGf_NvopE")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/RJfxpLYislXtZEL/features/6OLlLkXFPmW"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/RJfxpLYislXtZEL/configurations/Dry/features/6OLlLkXFPmW"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/RJfxpLYislXtZEL/configurations/Dry/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 69L)
                .d("NAME", "\"kVqrcivVMDM\"")
            .and().insertInto("FEATURE", 68L)
                .d("NAME", "\"_EM_792_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 71L)
                .d("NAME", "\"1rUXZjhPiAt\"")
            .and().insertInto("FEATURE", 70L)
                .d("NAME", "\"Eo\"")
                .r("PRODUCT_ID", 69L)
            .and().insertInto("PRODUCT", 76L)
                .d("NAME", "\"_EM_793_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 75L)
                .d("NAME", "\"_EM_794_XYZ_\"")
            .and().insertInto("PRODUCT", 74L)
                .d("NAME", "\"_EM_795_XYZ_\"")
            .and().insertInto("FEATURE", 73L)
                .d("NAME", "\"HfGpFExx\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 72L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 81L)
                .d("NAME", "\"m3RpoBAe\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 80L)
                .d("NAME", "\"ch9DD6BfL3H\"")
            .and().insertInto("PRODUCT", 79L)
                .d("NAME", "\"lS4XqAZDMYra7P\"")
            .and().insertInto("FEATURE", 78L)
                .d("NAME", "\"h2R6si3Igvp\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 77L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 86L)
                .d("NAME", "\"_EM_796_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 85L)
                .d("NAME", "\"KUY7ZEsFgyr\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"S9\"")
            .and().insertInto("FEATURE", 83L)
                .d("NAME", "\"_EM_797_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 82L)
                .r("IN_CONFIGURATIONS_ID", 85L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .and().insertInto("PRODUCT", 91L)
                .d("NAME", "\"_EM_798_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 90L)
                .d("NAME", "\"S_sSH\"")
            .and().insertInto("PRODUCT", 89L)
                .d("NAME", "\"Jm\"")
            .and().insertInto("FEATURE", 88L)
                .d("NAME", "\"xGRa9OsHES0p\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 87L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/cDSLwSb")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=PSpd_puSUpQweI&excludedFeature=hEDwDXs6efqi6HF")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/cDSLwSb/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/cDSLwSb")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/cDSLwSb/features/6OLlLkXFPmW"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/cDSLwSb/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/cDSLwSb")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/cDSLwSb/configurations/Dry"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=5eVBGf_NvopE")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/cDSLwSb/features/6OLlLkXFPmW"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/cDSLwSb/configurations/Dry/features/6OLlLkXFPmW"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_9 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/cDSLwSb/configurations/Dry/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_9.extract().statusCode()));
    }


}
