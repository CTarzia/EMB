import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-07-13T21:59:33.810-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 17 tests
 * <br>
 * Covered targets: 53
 * <br>
 * Used time: 3h 0m 0s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 452L)
                .d("NAME", "\"_EM_70232_XYZ_e\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 451L)
                .d("NAME", "\"_EM_104876_XYZ_\"")
            .and().insertInto("PRODUCT", 454L)
                .d("NAME", "\"_yzua\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 453L)
                .d("NAME", "\"7gHWqqB97fYxPSK\"")
            .and().insertInto("PRODUCT", 456L)
                .d("NAME", "\"_EM_70234_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 455L)
                .d("NAME", "\"_EM_6201_XYZ_\"")
            .and().insertInto("PRODUCT", 458L)
                .d("NAME", "\"Sz\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 457L)
                .d("NAME", "\"3uKJHV21_9z7MC\"")
            .and().insertInto("PRODUCT", 460L)
                .d("NAME", "\"_EM_6203_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 459L)
                .d("NAME", "\"_EM_70235_XYZ_\"")
            .and().insertInto("PRODUCT", 971L)
                .d("NAME", "\"_EM_6204_XYZ_\"")
            .and().insertInto("FEATURE", 970L)
                .d("NAME", "\"_EM_104877_XYZ_\"")
                .r("PRODUCT_ID", 452L)
            .and().insertInto("PRODUCT", 973L)
                .d("NAME", "\"_EM_6205_XYZ_\"")
            .and().insertInto("FEATURE", 972L)
                .d("NAME", "\"_EM_104878_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 975L)
                .d("NAME", "\"_EM_104879_XYZ_\"")
            .and().insertInto("FEATURE", 974L)
                .d("NAME", "\"_EM_104880_XYZ_\"")
                .r("PRODUCT_ID", 975L)
            .and().insertInto("PRODUCT", 977L)
                .d("NAME", "\"Xz6ljTkTQHY\"")
            .and().insertInto("FEATURE", 976L)
                .d("NAME", "\"0zt2o8hAhGSz\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 979L)
                .d("NAME", "\"COLLATIONS\"")
            .and().insertInto("FEATURE", 978L)
                .d("NAME", "\"_EM_6198_XYZ_Fn\"")
                .r("PRODUCT_ID", 973L)
            .and().insertInto("PRODUCT", 984L)
                .d("NAME", "\"_EM_104881_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 983L)
                .d("NAME", "\"Dt_Wfiten\"")
            .and().insertInto("PRODUCT", 982L)
                .d("NAME", "\"INTO\"")
            .and().insertInto("FEATURE", 981L)
                .d("NAME", "\"_EM_6211_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 980L)
                .r("IN_CONFIGURATIONS_ID", 451L)
                .r("ACTIVED_FEATURES_ID", 981L)
            .and().insertInto("PRODUCT", 989L)
                .d("NAME", "\"_EM_70238_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 988L)
                .d("NAME", "\"_EM_104882_XYZ_\"")
            .and().insertInto("PRODUCT", 987L)
                .d("NAME", "\"_EM_104883_XYZ_\"")
            .and().insertInto("FEATURE", 986L)
                .d("NAME", "\"_EM_70240_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 985L)
                .r("IN_CONFIGURATIONS_ID", 455L)
                .r("ACTIVED_FEATURES_ID", 978L)
            .and().insertInto("PRODUCT", 994L)
                .d("NAME", "\"_EM_6213_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 993L)
                .d("NAME", "\"_EM_6214_XYZ_\"")
            .and().insertInto("PRODUCT", 992L)
                .d("NAME", "\"_EM_104884_XYZ_\"")
            .and().insertInto("FEATURE", 991L)
                .d("NAME", "\"_EM_104885_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 990L)
                .r("IN_CONFIGURATIONS_ID", 993L)
                .r("ACTIVED_FEATURES_ID", 972L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_104873_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_104873_XYZ_/features/_UM_10U87U_%5CYZU"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_104873_XYZ_/features/_UM_10U87U_%5CYZU"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/_EM_6197_XYZ_/configurations/_EM_6198_XYZ_Fn")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/_EM_104875_XYZ_/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2366L)
                .d("NAME", "\"_EM_112959_XYZ_\"")
            .and().insertInto("FEATURE", 2365L)
                .d("NAME", "\"_EM_112960_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 2368L)
                .d("NAME", "\"cWfEeq\"")
            .and().insertInto("FEATURE", 2367L)
                .d("NAME", "\"0TK7l\"")
                .r("PRODUCT_ID", 2366L)
            .and().insertInto("PRODUCT", 2370L)
                .d("NAME", "\"D_ZCC7f\"")
            .and().insertInto("FEATURE", 2369L)
                .d("NAME", "\"WcXZu\"")
                .r("PRODUCT_ID", 2370L)
            .and().insertInto("PRODUCT", 2372L)
                .d("NAME", "\"t\"")
            .and().insertInto("FEATURE", 2371L)
                .d("NAME", "\"_EM_112961_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 2374L)
                .d("NAME", "\"_EM_112962_XYZ_\"")
            .and().insertInto("FEATURE", 2373L)
                .d("NAME", "\"_EM_112963_XYZ_\"")
                .r("PRODUCT_ID", 2368L)
            .and().insertInto("PRODUCT", 2379L)
                .d("NAME", "\"g9suoS45qSKb\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2378L)
                .d("NAME", "\"YC4\"")
            .and().insertInto("PRODUCT", 2377L)
                .d("NAME", "\"_EM_112964_XYZ_\"")
            .and().insertInto("FEATURE", 2376L)
                .d("NAME", "\"YTQxDbxdw_gyfr6z\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2375L)
                .r("IN_CONFIGURATIONS_ID", 2378L)
                .r("ACTIVED_FEATURES_ID", 2371L)
            .and().insertInto("PRODUCT", 16729L)
                .d("NAME", "\"vuY5w\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 16728L)
                .d("ID", "0")
            .and().insertInto("PRODUCT", 16731L)
                .d("NAME", "\"UUtEU\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 16730L)
                .d("ID", "1373988570")
            .and().insertInto("PRODUCT", 16733L)
                .d("NAME", "\"fspW\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 16732L)
                .d("ID", "993")
            .and().insertInto("PRODUCT", 16735L)
                .d("NAME", "\"6Xlpd\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 16734L)
                .d("ID", "235")
            .and().insertInto("PRODUCT", 16737L)
                .d("NAME", "\"1A5POZGNSkOGqaTf\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 16736L)
                .d("ID", "-32682")
            .and().insertInto("PRODUCT", 16739L)
                .d("NAME", "\"H6DC\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 16738L)
                .d("ID", "0")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_112957_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_112957_XYZ_/configurations/G8nyAnvoUb"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_112957_XYZ_/configurations/G8nyAnvoUb"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("G8nyAnvoUb"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_112958_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_112958_XYZ_/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_112958_XYZ_/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/S%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/_EM_112958_XYZ_/constraints/-208585323392340758")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 143100L)
                .d("NAME", "\"CP6GH7TWID\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 143099L)
                .d("NAME", "\"_EM_158852_XYZ_\"")
            .and().insertInto("PRODUCT", 143098L)
                .d("NAME", "\"oHFrZ\"")
            .and().insertInto("FEATURE", 143097L)
                .d("NAME", "\"TMnv5r491Jsl9\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 143096L)
                .r("IN_CONFIGURATIONS_ID", 143099L)
                .r("ACTIVED_FEATURES_ID", 143097L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_158851_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_158851_XYZ_/features/gUURQ9dzgT"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        List<InsertionDto> insertions1 = sql(insertions).insertInto("PRODUCT", 142950L)
                .d("NAME", "\"_EM_158851_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 142949L)
                .d("NAME", "\"5kQQ\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 142952L)
                .d("NAME", "\"p2j7cDe\"")
            .and().insertInto("FEATURE", 142951L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"gUURQ9dzgT\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions1result = controller.execInsertionsIntoDatabase(insertions1, insertionsresult);
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_158851_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_158851_XYZ_/configurations/5kQQ"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=BZ02n")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/_EM_158851_XYZ_/features/gUURQ9dzgT"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/_EM_158851_XYZ_/configurations/5kQQ/features/gUURQ9dzgT"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/_EM_158851_XYZ_/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("", hasItems("5kQQ", "5kQQ"));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/;")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 18270L)
                .d("NAME", "\"fQO\"")
            .and().insertInto("FEATURE", 18269L)
                .d("NAME", "\"_EM_19912_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 18272L)
                .d("NAME", "\"2sbZH\"")
            .and().insertInto("FEATURE", 18271L)
                .d("NAME", "\"_EM_19913_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        List<InsertionDto> insertions0 = sql(insertions).insertInto("PRODUCT", 17975L)
                .d("NAME", "\"#\"")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0, insertionsresult);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/%23")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=t&excludedFeature=AONkjTOvyreskdU0")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/%23/constraints/excludes"))
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 738902L)
                .d("NAME", "\"3W7RvwX\"")
            .and().insertInto("FEATURE", 738901L)
                .d("NAME", "\"6krVeNOKhBRUZ\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/%3FrOzPH5ehfO6E")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=hSknhrG_islz")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/%3FrOzPH5ehfO6E/constraints/requires"))
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 708031L)
                .d("NAME", "\"5pQVC\"")
            .and().insertInto("FEATURE", 708030L)
                .d("NAME", "\"Sb0sPaHXJ4Q\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 708033L)
                .d("NAME", "\"0SdPoc0fUzs_mn\"")
            .and().insertInto("FEATURE", 708032L)
                .d("NAME", "\"WeTXmkXD\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 708038L)
                .d("NAME", "\"460x\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 708037L)
                .d("NAME", "\"H8ZxOiGc8HH\"")
            .and().insertInto("PRODUCT", 708036L)
                .d("NAME", "\"Ba_M34RR\"")
            .and().insertInto("FEATURE", 708035L)
                .d("NAME", "\"h3K4g\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 708034L)
                .r("IN_CONFIGURATIONS_ID", 708037L)
                .r("ACTIVED_FEATURES_ID", 708032L)
            .and().insertInto("PRODUCT", 708043L)
                .d("NAME", "\"DW\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 708042L)
                .d("NAME", "\"p54SxXrXpBKsTW\"")
            .and().insertInto("PRODUCT", 708041L)
                .d("NAME", "\"E3WxoM7\"")
            .and().insertInto("FEATURE", 708040L)
                .d("NAME", "\"FxsMm3J6vifzGuzG\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 708039L)
                .r("IN_CONFIGURATIONS_ID", 708042L)
                .r("ACTIVED_FEATURES_ID", 708032L)
            .and().insertInto("PRODUCT", 708048L)
                .d("NAME", "\"oY20tB4jHh\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 708047L)
                .d("NAME", "\"VaAHc9WLw\"")
            .and().insertInto("PRODUCT", 708046L)
                .d("NAME", "\"o7hUf\"")
            .and().insertInto("FEATURE", 708045L)
                .d("NAME", "\"iIsKqrTAAc\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 708044L)
                .r("IN_CONFIGURATIONS_ID", 708042L)
                .r("ACTIVED_FEATURES_ID", 708045L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/7tIGZUvWvLo")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/7tIGZUvWvLo/configurations/;"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/7tIGZUvWvLo/configurations/;"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 272953L)
                .d("NAME", "\"6vmDH\"")
            .and().insertInto("FEATURE", 272952L)
                .d("NAME", "\"IiAMBVBNUhEtq\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 272955L)
                .d("NAME", "\"s9C6_CojWo_Mm1\"")
            .and().insertInto("FEATURE", 272954L)
                .d("NAME", "\"\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 272957L)
                .d("NAME", "\"oUdeXr0z_X5h5zg\"")
            .and().insertInto("FEATURE", 272956L)
                .d("NAME", "\"k16\"")
                .r("PRODUCT_ID", 272955L)
            .and().insertInto("PRODUCT", 272959L)
                .d("NAME", "\"XD4\"")
            .and().insertInto("FEATURE", 272958L)
                .d("NAME", "\"URUjs54u\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 272964L)
                .d("NAME", "\"jhcLiH8E\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 272963L)
                .d("NAME", "\"_EM_218729_XYZ_\"")
            .and().insertInto("PRODUCT", 272962L)
                .d("NAME", "\"Vz9BH_2QK\"")
            .and().insertInto("FEATURE", 272961L)
                .d("NAME", "\"7sXfb20f\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 272960L)
                .r("IN_CONFIGURATIONS_ID", 272963L)
                .r("ACTIVED_FEATURES_ID", 272958L)
            .and().insertInto("PRODUCT", 272969L)
                .d("NAME", "\"stTw0U\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 272968L)
                .d("NAME", "\"fUpaZV\"")
            .and().insertInto("PRODUCT", 272967L)
                .d("NAME", "\"1lI6kdHOw71XH3z\"")
            .and().insertInto("FEATURE", 272966L)
                .d("NAME", "\"mvqICZg\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 272965L)
                .r("IN_CONFIGURATIONS_ID", 272968L)
                .r("ACTIVED_FEATURES_ID", 272958L)
            .and().insertInto("PRODUCT", 272974L)
                .d("NAME", "\"fZGFfomFVDJq\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 272973L)
                .d("NAME", "\"DZ\"")
            .and().insertInto("PRODUCT", 272972L)
                .d("NAME", "\"PVq\"")
            .and().insertInto("FEATURE", 272971L)
                .d("NAME", "\"5F70p4pOZa\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 272970L)
                .r("IN_CONFIGURATIONS_ID", 272973L)
                .r("ACTIVED_FEATURES_ID", 272952L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/%3F")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("excludedFeature=7lw")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/%3F/constraints/excludes"))
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/%3F")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/%3F/configurations/_EM_218728_XYZ_"))
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/%3F/configurations/_EM_218728_XYZ_"))
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/keHzvDAXQwhL6v9")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=EFPwpxYBwmJ")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/keHzvDAXQwhL6v9/features/9kR7jyoHl0v"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/keHzvDAXQwhL6v9/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 66660L)
                .d("NAME", "\"_EM_123322_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 66659L)
                .d("ID", "577")
            .and().insertInto("PRODUCT", 66662L)
                .d("NAME", "\"UA6ywD\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 66661L)
                .d("ID", "171")
            .and().insertInto("PRODUCT", 66664L)
                .d("NAME", "\"IqmZ\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 66663L)
                .d("ID", "392")
            .and().insertInto("PRODUCT", 66666L)
                .d("NAME", "\"Njtggrgu7DVIP\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 66665L)
                .d("ID", "1368988363")
            .and().insertInto("PRODUCT", 66668L)
                .d("NAME", "\"kvA8p9c\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 66667L)
                .d("ID", "682")
            .and().insertInto("PRODUCT", 66670L)
                .d("NAME", "\"_EM_123323_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 66669L)
                .d("ID", "0")
            .and().insertInto("PRODUCT", 106346L)
                .d("NAME", "\"bRS15r3D\"")
            .and().insertInto("FEATURE", 106345L)
                .d("NAME", "\"D1XtP3K\"")
                .r("PRODUCT_ID", 106346L)
            .and().insertInto("PRODUCT", 106348L)
                .d("NAME", "\"C2ZK8\"")
            .and().insertInto("FEATURE", 106347L)
                .d("NAME", "\"PAgmVP0Jsy\"")
                .r("PRODUCT_ID", 66668L)
            .and().insertInto("PRODUCT", 106353L)
                .d("NAME", "\"_EM_123324_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 106352L)
                .d("NAME", "\"Wg0HBy\"")
            .and().insertInto("PRODUCT", 106351L)
                .d("NAME", "\"ZZ1boWw\"")
            .and().insertInto("FEATURE", 106350L)
                .d("NAME", "\"3Iq\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 106349L)
                .r("IN_CONFIGURATIONS_ID", 106352L)
                .r("ACTIVED_FEATURES_ID", 106347L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/bIPzaYUU")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/bIPzaYUU/configurations/_%5CM_1233UU_ZUZ_"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/bIPzaYUU/configurations/_%5CM_1233UU_ZUZ_"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/bIPzaYUU/constraints/-1047684")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 114111L)
                .d("NAME", "\"kxRPqfVGoBkPzzq\"")
            .and().insertInto("FEATURE", 114110L)
                .d("NAME", "\"7NVr_3\"")
                .r("PRODUCT_ID", 114111L)
            .and().insertInto("PRODUCT", 114113L)
                .d("NAME", "\"eWamxT\"")
            .and().insertInto("FEATURE", 114112L)
                .d("NAME", "\"g8lXdhozB\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 114115L)
                .d("NAME", "\"_EM_131334_XYZ_\"")
            .and().insertInto("FEATURE", 114114L)
                .d("NAME", "\"RO\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 114117L)
                .d("NAME", "\"hRCd\\jUKoBI5a\"")
            .and().insertInto("FEATURE", 114116L)
                .d("NAME", "\"i9sW\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 114122L)
                .d("NAME", "\"MB\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 114121L)
                .d("NAME", "\"qZlnkNn33c6tRK\"")
            .and().insertInto("PRODUCT", 114120L)
                .d("NAME", "\"_EM_131335_XYZ_\"")
            .and().insertInto("FEATURE", 114119L)
                .d("NAME", "\"_EM_131336_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 114118L)
                .r("IN_CONFIGURATIONS_ID", 114121L)
                .r("ACTIVED_FEATURES_ID", 114110L)
            .and().insertInto("PRODUCT", 114127L)
                .d("NAME", "\"_EM_131337_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 114126L)
                .d("NAME", "\"0ii7nUiMZIjseAB\"")
            .and().insertInto("PRODUCT", 114125L)
                .d("NAME", "\"Xf23F52_AWAnDo\"")
            .and().insertInto("FEATURE", 114124L)
                .d("NAME", "\"1XQbfzFboe2Jb\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 114123L)
                .r("IN_CONFIGURATIONS_ID", 114126L)
                .r("ACTIVED_FEATURES_ID", 114110L)
            .and().insertInto("PRODUCT", 114132L)
                .d("NAME", "\"_EM_131338_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 114131L)
                .d("NAME", "\"Qlv9cJs9P4NO0_\"")
            .and().insertInto("PRODUCT", 114130L)
                .d("NAME", "\"_EM_131339_XYZ_\"")
            .and().insertInto("FEATURE", 114129L)
                .d("NAME", "\"vd2x\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 114128L)
                .r("IN_CONFIGURATIONS_ID", 114126L)
                .r("ACTIVED_FEATURES_ID", 114116L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/%3Fq7")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/%3Fq7/features/fVw0UNqHGEV@G"))
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/%3Fq7/features/fVw0UNqHGEV@G"))
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/Ze4rSg/configurations/RtWwDyoP")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 112243L)
                .d("NAME", "\"oQWmgzJEpV8T\"")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/oQWmgzJEpV8T")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/oQWmgzJEpV8T/features/P3YVbkRsIX"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/oQWmgzJEpV8T")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/oQWmgzJEpV8T/configurations/tgOev"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=u")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/oQWmgzJEpV8T/features/P3YVbkRsIX"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/oQWmgzJEpV8T/configurations/tgOev/features/P3YVbkRsIX"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/oQWmgzJEpV8T/configurations/tgOev/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 452L)
                .d("NAME", "\"_EM_70232_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 451L)
                .d("NAME", "\"_EM_70233_XYZ_\"")
            .and().insertInto("PRODUCT", 454L)
                .d("NAME", "\"_yzua\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 453L)
                .d("NAME", "\"7gHWqqB97fYxPSK\"")
            .and().insertInto("PRODUCT", 456L)
                .d("NAME", "\"_EM_70234_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 455L)
                .d("NAME", "\"_EM_6201_XYZ_\"")
            .and().insertInto("PRODUCT", 458L)
                .d("NAME", "\"_EM_6202_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 457L)
                .d("NAME", "\"3uKJHV21_9z7MC\"")
            .and().insertInto("PRODUCT", 460L)
                .d("NAME", "\"_EM_6203_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 459L)
                .d("NAME", "\"_EM_70235_XYZ_\"")
            .and().insertInto("PRODUCT", 971L)
                .d("NAME", "\"_EM_6204_XYZ_\"")
            .and().insertInto("FEATURE", 970L)
                .d("NAME", "\"6v3vZk\"")
                .r("PRODUCT_ID", 452L)
            .and().insertInto("PRODUCT", 973L)
                .d("NAME", "\"_EM_6205_XYZ_\"")
            .and().insertInto("FEATURE", 972L)
                .d("NAME", "\"G0M48htMZlD8x\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 975L)
                .d("NAME", "\"xp\"")
            .and().insertInto("FEATURE", 974L)
                .d("NAME", "\"_EM_6206_XYZ_\"")
                .r("PRODUCT_ID", 975L)
            .and().insertInto("PRODUCT", 977L)
                .d("NAME", "\"Xz6ljTkTQH\"")
            .and().insertInto("FEATURE", 976L)
                .d("NAME", "\"0zt2o8hAhGSz\"")
                .r("PRODUCT_ID", 977L)
            .and().insertInto("PRODUCT", 979L)
                .d("NAME", "\"COLLATIONS\"")
            .and().insertInto("FEATURE", 978L)
                .d("NAME", "\"_EM_6208_XYZ_\"")
                .r("PRODUCT_ID", 456L)
            .and().insertInto("PRODUCT", 984L)
                .d("NAME", "\"_EM_70236_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 983L)
                .d("NAME", "\"_EM_6210_XYZ_p\"")
            .and().insertInto("PRODUCT", 982L)
                .d("NAME", "\"_EM_70237_XYZ_\"")
            .and().insertInto("FEATURE", 981L)
                .d("NAME", "\"_EM_6211_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 980L)
                .r("IN_CONFIGURATIONS_ID", 457L)
                .r("ACTIVED_FEATURES_ID", 978L)
            .and().insertInto("PRODUCT", 989L)
                .d("NAME", "\"_EM_70238_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 988L)
                .d("NAME", "\"Q8Q2h\"")
            .and().insertInto("PRODUCT", 987L)
                .d("NAME", "\"_EM_70239_XYZ_\"")
            .and().insertInto("FEATURE", 986L)
                .d("NAME", "\"_EM_70240_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 985L)
                .r("IN_CONFIGURATIONS_ID", 453L)
                .r("ACTIVED_FEATURES_ID", 986L)
            .and().insertInto("PRODUCT", 994L)
                .d("NAME", "\"_EM_6213_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 993L)
                .d("NAME", "\"_EM_6214_XYZ_\"")
            .and().insertInto("PRODUCT", 992L)
                .d("NAME", "\"dX9R8AhtGZmf9iFu\"")
            .and().insertInto("FEATURE", 991L)
                .d("NAME", "\"_EM_70241_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 990L)
                .r("IN_CONFIGURATIONS_ID", 993L)
                .r("ACTIVED_FEATURES_ID", 972L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/zEK5eROks")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/zEK5eROks/features/UUMEEhzfY"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/zEK5eROks/features/UUMEEhzfY"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/_EM_6197_XYZ_/configurations/_EM_6198_XYZ_F")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/_GUXH0rL9DI%5CN/configurations")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2685L)
                .d("NAME", "\"_EM_4288_XYZ_\"")
            .and().insertInto("FEATURE", 2684L)
                .d("NAME", "\"_EM_48210_XYZ_\"")
                .r("PRODUCT_ID", 2685L)
            .and().insertInto("PRODUCT", 2687L)
                .d("NAME", "\"_EM_10229_XYZ_\"")
            .and().insertInto("FEATURE", 2686L)
                .d("NAME", "\"_EM_10230_XYZ_\"")
                .r("PRODUCT_ID", 2687L)
            .and().insertInto("PRODUCT", 2692L)
                .d("NAME", "\"_EM_48211_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2691L)
                .d("NAME", "\"_EM_10231_XYZ_\"")
            .and().insertInto("PRODUCT", 2690L)
                .d("NAME", "\"1c8N\"")
            .and().insertInto("FEATURE", 2689L)
                .d("NAME", "\"yezNFn\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2688L)
                .r("IN_CONFIGURATIONS_ID", 2691L)
                .r("ACTIVED_FEATURES_ID", 2689L)
            .and().insertInto("PRODUCT", 2697L)
                .d("NAME", "\"kge97LhE7x2oQ\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2696L)
                .d("NAME", "\"623460\"")
            .and().insertInto("PRODUCT", 2695L)
                .d("NAME", "\"RxlWi4VvaT76ZAhB\"")
            .and().insertInto("FEATURE", 2694L)
                .d("NAME", "\"29hstT9VSKd\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2693L)
                .r("IN_CONFIGURATIONS_ID", 2696L)
                .r("ACTIVED_FEATURES_ID", 2689L)
            .and().insertInto("PRODUCT", 2702L)
                .d("NAME", "\"mn7ZWIxqaMcL\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2701L)
                .d("NAME", "\"_EM_48212_XYZ_\"")
            .and().insertInto("PRODUCT", 2700L)
                .d("NAME", "\"ivUp\"")
            .and().insertInto("FEATURE", 2699L)
                .d("NAME", "\"_EM_4294_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2698L)
                .r("IN_CONFIGURATIONS_ID", 2696L)
                .r("ACTIVED_FEATURES_ID", 2699L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/beJVKfm7")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/beJVKfm7/features/e"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=BmWR")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/beJVKfm7/features/%5EEN_1U230o%5CYZ_"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/beJVKfm7")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/beJVKfm7/configurations/_EM_48209_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=NN0fdZBnGZE")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/beJVKfm7/features/%5EEN_1U230o%5CYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/beJVKfm7/configurations/_EM_48209_XYZ_/features/%5EEN_1U230o%5CYZ_"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/beJVKfm7/configurations/_EM_48209_XYZ_/features/%5EEN_1U230o%5CYZ_"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/dvDvA")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/dvDvA/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 41975L)
                .d("NAME", "\"lagbJz_WGbVJVP3q\"")
            .and().insertInto("FEATURE", 41974L)
                .d("NAME", "\"CsljBBj9ITIySG\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 41977L)
                .d("NAME", "\"jzQJxxxq\"")
            .and().insertInto("FEATURE", 41976L)
                .d("NAME", "\"bk5thV7QmGrHTH6\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 41982L)
                .d("NAME", "\"_EM_126160_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 41981L)
                .d("NAME", "\"FgT5MqOJBS0s\"")
            .and().insertInto("PRODUCT", 41980L)
                .d("NAME", "\"oCUmjwp\"")
            .and().insertInto("FEATURE", 41979L)
                .d("NAME", "\"_EM_126161_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 41978L)
                .r("IN_CONFIGURATIONS_ID", 41981L)
                .r("ACTIVED_FEATURES_ID", 41976L)
            .and().insertInto("PRODUCT", 41987L)
                .d("NAME", "\"9RKpE_oSVP\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 41986L)
                .d("NAME", "\"QIB\"")
            .and().insertInto("PRODUCT", 41985L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 41984L)
                .d("NAME", "\"VbFiDnY29leD\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 41983L)
                .r("IN_CONFIGURATIONS_ID", 41986L)
                .r("ACTIVED_FEATURES_ID", 41984L)
            .and().insertInto("PRODUCT", 41992L)
                .d("NAME", "\"Vv1bWyEJ7Co5567\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 41991L)
                .d("NAME", "\"wSNz\"")
            .and().insertInto("PRODUCT", 41990L)
                .d("NAME", "\"6rY_Hjrt\"")
            .and().insertInto("FEATURE", 41989L)
                .d("NAME", "\"SmUUs1ecp0\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 41988L)
                .r("IN_CONFIGURATIONS_ID", 41981L)
                .r("ACTIVED_FEATURES_ID", 41989L)
            .and().insertInto("PRODUCT", 41997L)
                .d("NAME", "\"tRIqsQzomRN\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 41996L)
                .d("NAME", "\"RBcBOdVSPEYj\"")
            .and().insertInto("PRODUCT", 41995L)
                .d("NAME", "\"em\"")
            .and().insertInto("FEATURE", 41994L)
                .d("NAME", "\"a3\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 41993L)
                .r("IN_CONFIGURATIONS_ID", 41991L)
                .r("ACTIVED_FEATURES_ID", 41979L)
            .and().insertInto("PRODUCT", 42002L)
                .d("NAME", "\"c6eZzv1wiEqdT\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 42001L)
                .d("NAME", "\"MYJt\"")
            .and().insertInto("PRODUCT", 42000L)
                .d("NAME", "\"N2R1q\"")
            .and().insertInto("FEATURE", 41999L)
                .d("NAME", "\"_EM_126162_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 41998L)
                .r("IN_CONFIGURATIONS_ID", 41986L)
                .r("ACTIVED_FEATURES_ID", 41979L)
            .and().insertInto("PRODUCT", 110959L)
                .d("NAME", "\"OV364KM0p\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 110958L)
                .d("ID", "934")
            .and().insertInto("PRODUCT", 110961L)
                .d("NAME", "\"_EM_126163_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 110960L)
                .d("ID", "516")
            .and().insertInto("PRODUCT", 110963L)
                .d("NAME", "\"Cx\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 110962L)
                .d("ID", "2070735054")
            .and().insertInto("PRODUCT", 110965L)
                .d("NAME", "\"_EM_126164_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 110964L)
                .d("ID", "6377565228550701612")
            .and().insertInto("PRODUCT", 110967L)
                .d("NAME", "\"_EM_126165_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 110966L)
                .d("ID", "36")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/JhSr%5Cae/constraints/335")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/JhSr%5Cae")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 420236L)
                .d("NAME", "\"UHj1L\"")
            .and().insertInto("FEATURE", 420235L)
                .d("NAME", "\"GkmvjHDpL5qmyHi4\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 420238L)
                .d("NAME", "\"dwn7m5\"")
            .and().insertInto("FEATURE", 420237L)
                .d("NAME", "\"V2RehsNnYh\"")
                .r("PRODUCT_ID", 420236L)
            .and().insertInto("PRODUCT", 420240L)
                .d("NAME", "\"KlwOtP4TPtb\"")
            .and().insertInto("FEATURE", 420239L)
                .d("NAME", "\"\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 420242L)
                .d("NAME", "\"bgmWmTpwU9o9sUnr\"")
            .and().insertInto("FEATURE", 420241L)
                .d("NAME", "\"8488RU\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 420244L)
                .d("NAME", "\"ieGaJsi\"")
            .and().insertInto("FEATURE", 420243L)
                .d("NAME", "\"BTz\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/_GM_2U7546_%5CYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/_GM_2U7546_%5CYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 145575L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 145574L)
                .d("NAME", "\"ckrnncqNSEsK\"")
            .and().insertInto("PRODUCT", 145577L)
                .d("NAME", "\"_EM_155626_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 145576L)
                .d("NAME", "\"CrMQH2PN\"")
            .and().insertInto("PRODUCT", 145579L)
                .d("NAME", "\"5yUSxH4\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 145578L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT", 145581L)
                .d("NAME", "\"ri_0oHy1ot9qTU\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 145580L)
                .d("NAME", "\"_EM_155627_XYZ_\"")
            .and().insertInto("PRODUCT", 145583L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 145582L)
                .d("NAME", "\"_EM_155628_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        List<InsertionDto> insertions0 = sql(insertions).insertInto("PRODUCT", 117099L)
                .d("NAME", "\"yE_6\\b=4Ue\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 117098L)
                .d("NAME", "\"r7\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0, insertionsresult);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/yE_6%5Cb=4Ue/configurations/r7/features")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/yE_6%5Cb=4Ue")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 145091L)
                .d("NAME", "\"1RCclrGzVbR2\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 145090L)
                .d("NAME", "\"OeDBzjt\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        List<InsertionDto> insertions0 = sql(insertions).insertInto("PRODUCT", 117099L)
                .d("NAME", "\";\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 117098L)
                .d("NAME", "\"r7\"")
                .d("VALID", "false")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0, insertionsresult);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/;/configurations/r7/features")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/;")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
    }


}
