import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;

import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;

import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-07-13T18:42:47.139-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 28 tests
 * <br>
 * Covered targets: 259
 * <br>
 * Used time: 1h 3m 15s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test1h {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 415L)
                .d("NAME", "\"H5vQzMMWQZ\"")
            .and().insertInto("PRODUCT", 416L)
                .d("NAME", "\"I_Aaoa\"")
            .and().insertInto("PRODUCT", 417L)
                .d("NAME", "\"UNnDNCW_qqho\"")
            .and().insertInto("PRODUCT", 418L)
                .d("NAME", "\"pFKd\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/b%C2%83")
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsResource_58_addProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 1559L)
                .d("NAME", "\"mP\"")
            .and().insertInto("FEATURE", 1558L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"Otb5aCK\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/mP/features/Otb5aCK")
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 1257L)
                .d("NAME", "\"guzT8\"")
            .and().insertInto("FEATURE", 1256L)
                .d("DESCRIPTION", "\"qljvBHgc5J4uZWA\"")
                .d("NAME", "\"hxIdoW__JyV\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=rGl6K")
                .put(baseUrlOfSut + "/products/guzT8/features/hxIdoW__JyV")
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/SZfzz")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_4_with500() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/hK7lYu_/configurations/3w_h6S8i")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_5_with500() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/KlHo8Jfi_KbqwrMP/constraints/requires")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_6_with500() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/bEJ/constraints/excludes")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_7_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_7_with500() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/2aM/features/9vgDqCP0rHIYMF")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_8_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_8_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/qD0NEHlM9n5XRo/features/cYfzPvpDsl")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_9_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_9_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/wxaVyxPIpvHiK/features")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_10_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_10_with500() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/g/configurations/5nXS_6K8ND/features/dUYJw_EcExNF")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_79_addFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_11_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_11_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 69L)
                .d("NAME", "\"kVqrcivVMDM\"")
            .and().insertInto("FEATURE", 68L)
                .d("NAME", "\"pf0l64mJkiDY_jFc\"")
                .r("PRODUCT_ID", 69L)
            .and().insertInto("PRODUCT", 71L)
                .d("NAME", "\"1rUXZjhPiAt\"")
            .and().insertInto("FEATURE", 70L)
                .d("NAME", "\"_EM_767_XYZ_\"")
                .r("PRODUCT_ID", 69L)
            .and().insertInto("PRODUCT", 76L)
                .d("NAME", "\"K8WKHnNW8MO\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 75L)
                .d("NAME", "\"_EM_768_XYZ_\"")
            .and().insertInto("PRODUCT", 74L)
                .d("NAME", "\"7GgzFmwvg\"")
            .and().insertInto("FEATURE", 73L)
                .d("NAME", "\"_EM_769_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 72L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .and().insertInto("PRODUCT", 81L)
                .d("NAME", "\"m3RpoBAe\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 80L)
                .d("NAME", "\"ch9DD6BfL3\"")
            .and().insertInto("PRODUCT", 79L)
                .d("NAME", "\"lS4XqAZDMYra7P\"")
            .and().insertInto("FEATURE", 78L)
                .d("NAME", "\"h2R6si3Igvp\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 77L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 73L)
            .and().insertInto("PRODUCT", 86L)
                .d("NAME", "\"_EM_770_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 85L)
                .d("NAME", "\"KUY7ZEsFgyri\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"S9\"")
            .and().insertInto("FEATURE", 83L)
                .d("NAME", "\"wH3WDn\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 82L)
                .r("IN_CONFIGURATIONS_ID", 85L)
                .r("ACTIVED_FEATURES_ID", 78L)
            .and().insertInto("PRODUCT", 91L)
                .d("NAME", "\"q\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 90L)
                .d("NAME", "\"S_sSH\"")
            .and().insertInto("PRODUCT", 89L)
                .d("NAME", "\"Jm\"")
            .and().insertInto("FEATURE", 88L)
                .d("NAME", "\"xGRa9OsHES0p\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 87L)
                .r("IN_CONFIGURATIONS_ID", 90L)
                .r("ACTIVED_FEATURES_ID", 73L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_766_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=nDlh9vU2CzJE")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_766_XYZ_/features/%C2%89z9Ke3J"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsFeaturesResource_33_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_766_XYZ_/features/%C2%89z9Ke3J"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    /**
    * [test_12_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_12_with500() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/KTADSIr0GCWCelGz/configurations/cyrQIoPGQ2")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsConfigurationsDAO_71_deleteConfigurationForProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_13_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_13_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2689L)
                .d("NAME", "\"_EM_3033_XYZ_\"")
            .and().insertInto("FEATURE", 2688L)
                .d("NAME", "\"_EM_3034_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 2694L)
                .d("NAME", "\"_EM_3035_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2693L)
                .d("NAME", "\"Qj3\"")
            .and().insertInto("PRODUCT", 2692L)
                .d("NAME", "\"_EM_3036_XYZ_\"")
            .and().insertInto("FEATURE", 2691L)
                .d("NAME", "\"kBJfDoyXsHDjBoW\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2690L)
                .r("IN_CONFIGURATIONS_ID", 2693L)
                .r("ACTIVED_FEATURES_ID", 2688L)
            .and().insertInto("PRODUCT", 2699L)
                .d("NAME", "\"oDn7G6AmktiDeN\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2698L)
                .d("NAME", "\"_EM_3037_XYZ_\"")
            .and().insertInto("PRODUCT", 2697L)
                .d("NAME", "\"_EM_3038_XYZ_\"")
            .and().insertInto("FEATURE", 2696L)
                .d("NAME", "\"3T\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2695L)
                .r("IN_CONFIGURATIONS_ID", 2698L)
                .r("ACTIVED_FEATURES_ID", 2696L)
            .and().insertInto("PRODUCT", 2704L)
                .d("NAME", "\"uPq_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2703L)
                .d("NAME", "\"MQXPgJBLAn3\"")
            .and().insertInto("PRODUCT", 2702L)
                .d("NAME", "\"06R\"")
            .and().insertInto("FEATURE", 2701L)
                .d("NAME", "\"_EM_3039_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2700L)
                .r("IN_CONFIGURATIONS_ID", 2703L)
                .r("ACTIVED_FEATURES_ID", 2696L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_3031_XYZ_5")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_3031_XYZ_5/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=UKrVPr6lcASHMbp&requiredFeature=YlxS_")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_3031_XYZ_5/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_3031_XYZ_5")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_3031_XYZ_5/configurations/%5B"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsConfigurationResource_42_addConfiguration
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_3031_XYZ_5/configurations/%5B"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("["))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
    }
    
    
    /**
    * [test_14_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_14_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/WXZYU_BmH17Qp3m/configurations/lnlVR02Dwsot/features")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_15_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_15_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 69L)
                .d("NAME", "\"kVqrcivVMDM\"")
            .and().insertInto("FEATURE", 68L)
                .d("NAME", "\"_UU_U9UUXUZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 71L)
                .d("NAME", "\"_EM_1825_XYZ_\"")
            .and().insertInto("FEATURE", 70L)
                .d("NAME", "\"Eo\"")
                .r("PRODUCT_ID", 71L)
            .and().insertInto("PRODUCT", 76L)
                .d("NAME", "\"_EM_793_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 75L)
                .d("NAME", "\"22292\"")
            .and().insertInto("PRODUCT", 74L)
                .d("NAME", "\"_EM_795_XYZ_\"")
            .and().insertInto("FEATURE", 73L)
                .d("NAME", "\"HfGpFExxI\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 72L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 81L)
                .d("NAME", "\"_EM_1826_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 80L)
                .d("NAME", "\"_EM_1827_XYZ_\"")
            .and().insertInto("PRODUCT", 79L)
                .d("NAME", "\"_EM_1828_XYZ_\"")
            .and().insertInto("FEATURE", 78L)
                .d("NAME", "\"h2R6si3Igvp\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 77L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 86L)
                .d("NAME", "\"_EM_796_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 85L)
                .d("NAME", "\"KUY7ZEsFgyr\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"S9\"")
            .and().insertInto("FEATURE", 83L)
                .d("NAME", "\"_EM_797_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 82L)
                .r("IN_CONFIGURATIONS_ID", 85L)
                .r("ACTIVED_FEATURES_ID", 78L)
            .and().insertInto("PRODUCT", 91L)
                .d("NAME", "\"_EM_798_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 90L)
                .d("NAME", "\"_EM_1829_XYZ_\"")
            .and().insertInto("PRODUCT", 89L)
                .d("NAME", "\"Jm\"")
            .and().insertInto("FEATURE", 88L)
                .d("NAME", "\"_EM_1830_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 87L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_1824_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_1824_XYZ_/features/wE"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_1824_XYZ_/features/_EM_791_XYZ_"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_16_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_16_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 69L)
                .d("NAME", "\"kVqrcivVMDM\"")
            .and().insertInto("FEATURE", 68L)
                .d("NAME", "\"_EM_792_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 71L)
                .d("NAME", "\"1rUXZjhPiAt\"")
            .and().insertInto("FEATURE", 70L)
                .d("NAME", "\"Eo\"")
                .r("PRODUCT_ID", 69L)
            .and().insertInto("PRODUCT", 76L)
                .d("NAME", "\"_EM_793_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 75L)
                .d("NAME", "\"_EM_794_XYZ_\"")
            .and().insertInto("PRODUCT", 74L)
                .d("NAME", "\"_EM_795_XYZ_\"")
            .and().insertInto("FEATURE", 73L)
                .d("NAME", "\"HfGpFExx\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 72L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 81L)
                .d("NAME", "\"m3RpoBAe\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 80L)
                .d("NAME", "\"ch9DD6BfL3H\"")
            .and().insertInto("PRODUCT", 79L)
                .d("NAME", "\"lS4XqAZDMYra7P\"")
            .and().insertInto("FEATURE", 78L)
                .d("NAME", "\"h2R6si3Igvp\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 77L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 86L)
                .d("NAME", "\"_EM_796_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 85L)
                .d("NAME", "\"KUY7ZEsFgyr\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"S9\"")
            .and().insertInto("FEATURE", 83L)
                .d("NAME", "\"_EM_797_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 82L)
                .r("IN_CONFIGURATIONS_ID", 85L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .and().insertInto("PRODUCT", 91L)
                .d("NAME", "\"_EM_798_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 90L)
                .d("NAME", "\"S_sSH\"")
            .and().insertInto("PRODUCT", 89L)
                .d("NAME", "\"Jm\"")
            .and().insertInto("FEATURE", 88L)
                .d("NAME", "\"xGRa9OsHES0p\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 87L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .and().insertInto("PRODUCT", 5991L)
                .d("NAME", "\"J\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 5990L)
                .d("ID", "118")
            .and().insertInto("PRODUCT", 5993L)
                .d("NAME", "\"TWf\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 5992L)
                .d("ID", "12")
            .and().insertInto("PRODUCT", 5995L)
                .d("NAME", "\"38\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 5994L)
                .d("ID", "-915512655")
            .and().insertInto("PRODUCT", 5997L)
                .d("NAME", "\"lRhaai2mkdGdtB8\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 5996L)
                .d("ID", "19")
            .and().insertInto("PRODUCT", 5999L)
                .d("NAME", "\"w_RS\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 5998L)
                .d("ID", "607")
            .and().insertInto("PRODUCT", 6001L)
                .d("NAME", "\"zElOFNR5ntJt4H\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 6000L)
                .d("ID", "915")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/Ga4I1wDB")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("excludedFeature=mT")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Ga4I1wDB/constraints/excludes"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_110_addExcludesConstraintToProduct
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/Ga4I1wDB")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Ga4I1wDB/features/s4M"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("description=gmPi00nedfO")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/Ga4I1wDB/features/s4M"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("s4M"))
                .body("'description'", containsString("gmPi00nedfO"));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/tt")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_17_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_17_with500() throws Exception {
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/KQFcGeNk")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/KQFcGeNk/configurations/u"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/KQFcGeNk/features/tqJCq1"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/KQFcGeNk/configurations/u/features/tqJCq1"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/KQFcGeNk/configurations/u/features/tqJCq1"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_18_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_18_with500() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/Yk_Or9GfI5")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_19_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_19_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 17327L)
                .d("NAME", "\"QKT6mIfLeEYLMHX\"")
            .and().insertInto("FEATURE", 17326L)
                .d("NAME", "\"OdQk5vBdvBpoNqUPh\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        List<InsertionDto> insertions0 = sql(insertions).insertInto("PRODUCT", 14815L)
                .d("NAME", "\"_EM_18970_XYZ_\"")
            .and().insertInto("FEATURE", 14814L)
                .d("DESCRIPTION", "\"SQRrC\"")
                .d("NAME", "\"[EMU1897U_X[Z_\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0, insertionsresult);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_18970_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=WnV")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_18970_XYZ_/features/%5BEMU1897U_X%5BZ_"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsFeaturesResource_33_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_18970_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=f58kTuj6p6fJP6F&excludedFeature=fC49hPMADO")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_18970_XYZ_/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/RcRU_RC7/constraints/247")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_18970_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_18970_XYZ_/configurations/_EM_21210_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/1aYDJn15h3N1fe/features/%5BEMU1897U_X%5BZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/_EM_18970_XYZ_/configurations/_EM_21210_XYZ_/features/%5BEMU1897U_X%5BZ_"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsConfigurationFeaturesResource_37_addFeatureToConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_20_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_20_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/0Hydc31")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=c4yRS3r")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/0Hydc31/features/YyZ"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/0Hydc31/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        List<InsertionDto> insertions1 = sql().insertInto("PRODUCT", 17480L)
                .d("NAME", "\"0Hydc31\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 17479L)
                .d("NAME", "\"65MK5Vs2WwqBQE\"")
                .d("VALID", "true")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 17482L)
                .d("NAME", "\"s95Y_DEY3Q8B\"")
            .and().insertInto("FEATURE", 17481L)
                .d("DESCRIPTION", "\"Bddl\"")
                .d("NAME", "\"v_\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions1result = controller.execInsertionsIntoDatabase(insertions1);
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/0Hydc31")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/0Hydc31/configurations/65MK5Vs2WwqBQE"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/0Hydc31/features/YyZ"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/0Hydc31/configurations/65MK5Vs2WwqBQE/features/YyZ"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/0Hydc31/configurations/65MK5Vs2WwqBQE/features/YyZ"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_80_addFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/0Hydc31")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/0Hydc31/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=5DJqXZIsi&excludedFeature=Lls9xgVUh")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/0Hydc31/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    /**
    * [test_21_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_21_with500() throws Exception {
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/iehiV93t1wR0NioI")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/iehiV93t1wR0NioI/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        List<InsertionDto> insertions1 = sql().insertInto("PRODUCT", 15194L)
                .d("NAME", "\"iehiV93t1wR0NioI\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 15193L)
                .d("NAME", "\"kRtXC1iwVFC2b\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions1result = controller.execInsertionsIntoDatabase(insertions1);
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/iehiV93t1wR0NioI")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/iehiV93t1wR0NioI/configurations/kRtXC1iwVFC2b"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/iehiV93t1wR0NioI/features/t4hCGCn"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/iehiV93t1wR0NioI/configurations/kRtXC1iwVFC2b/features/t4hCGCn"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/iehiV93t1wR0NioI")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("iehiV93t1wR0NioI"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(1))
                .body("'constraints'[0].'sourceFeatureName'", nullValue())
                .body("'constraints'[0].'requiredFeatureName'", nullValue())
                .body("'constraints'[0].'type'", containsString("requires"));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/iehiV93t1wR0NioI")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/iehiV93t1wR0NioI/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    /**
    * [test_22_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_22_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 69L)
                .d("NAME", "\"kVqrcivVMDM\"")
            .and().insertInto("FEATURE", 68L)
                .d("NAME", "\"_EM_792_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 71L)
                .d("NAME", "\"1rUXZjhPiAt\"")
            .and().insertInto("FEATURE", 70L)
                .d("NAME", "\"Eo\"")
                .r("PRODUCT_ID", 69L)
            .and().insertInto("PRODUCT", 76L)
                .d("NAME", "\"_EM_793_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 75L)
                .d("NAME", "\"_EM_794_XYZ_\"")
            .and().insertInto("PRODUCT", 74L)
                .d("NAME", "\"_EM_795_XYZ_\"")
            .and().insertInto("FEATURE", 73L)
                .d("NAME", "\"HfGpFExx\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 72L)
                .r("IN_CONFIGURATIONS_ID", 75L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 81L)
                .d("NAME", "\"m3RpoBAe\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 80L)
                .d("NAME", "\"ch9DD6BfL3H\"")
            .and().insertInto("PRODUCT", 79L)
                .d("NAME", "\"lS4XqAZDMYra7P\"")
            .and().insertInto("FEATURE", 78L)
                .d("NAME", "\"h2R6si3Igvp\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 77L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 68L)
            .and().insertInto("PRODUCT", 86L)
                .d("NAME", "\"_EM_796_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 85L)
                .d("NAME", "\"KUY7ZEsFgyr\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"S9\"")
            .and().insertInto("FEATURE", 83L)
                .d("NAME", "\"_EM_797_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 82L)
                .r("IN_CONFIGURATIONS_ID", 85L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .and().insertInto("PRODUCT", 91L)
                .d("NAME", "\"_EM_798_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 90L)
                .d("NAME", "\"S_sSH\"")
            .and().insertInto("PRODUCT", 89L)
                .d("NAME", "\"Jm\"")
            .and().insertInto("FEATURE", 88L)
                .d("NAME", "\"xGRa9OsHES0p\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 87L)
                .r("IN_CONFIGURATIONS_ID", 80L)
                .r("ACTIVED_FEATURES_ID", 70L)
            .and().insertInto("PRODUCT", 4053L)
                .d("NAME", "\"IKSxMHyIk\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 4052L)
                .d("ID", "125")
            .and().insertInto("PRODUCT", 4055L)
                .d("NAME", "\"\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 4054L)
                .d("ID", "938")
            .and().insertInto("PRODUCT", 4057L)
                .d("NAME", "\"osD\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 4056L)
                .d("ID", "-1264902182")
            .and().insertInto("PRODUCT", 4059L)
                .d("NAME", "\"a08c\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 4058L)
                .d("ID", "344")
            .and().insertInto("PRODUCT", 4061L)
                .d("NAME", "\"Nu\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 4060L)
                .d("ID", "669")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/Qs0aotjPnmAr")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("requiredFeature=W")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Qs0aotjPnmAr/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/Qs0aotjPnmAr")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Qs0aotjPnmAr/features/6OLlLkXFPmW"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/Qs0aotjPnmAr/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/Qs0aotjPnmAr")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Qs0aotjPnmAr/configurations/Dry"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=5eVBGf_NvopE")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/Qs0aotjPnmAr/features/6OLlLkXFPmW"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/Qs0aotjPnmAr/configurations/Dry/features/6OLlLkXFPmW"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_9 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/Qs0aotjPnmAr/configurations/Dry/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_9.extract().statusCode()));
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/yzr")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_23_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_23_with500() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/7Xcemb6w/configurations/DcAxdzJ3qv/features/2zxQUe9DN22tJ")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_24_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_24_with500() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/gkP/features/ZX0jHi3PF")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_25_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_25_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 15145L)
                .d("NAME", "\"UL\"")
            .and().insertInto("FEATURE", 15144L)
                .d("DESCRIPTION", "\"\"")
                .d("NAME", "\"8pqm8VaBmn66\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/UL/features/8pqm8VaBmn66")
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/UL")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("UL"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/UL")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=QII3ZRv&requiredFeature=6")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/UL/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/UL/configurations/aOstjOHIbH/features")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/UL")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/UL/configurations/aOstjOHIbH"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/UL/configurations/aOstjOHIbH"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("aOstjOHIbH"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/UL/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("", hasItems("aOstjOHIbH"));
        
    }
    
    
    /**
    * [test_26_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_26_with500() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/Se0RO0s8jIV0")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Se0RO0s8jIV0/features/l"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Se0RO0s8jIV0/features/l"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_64_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_27_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_27_with500() throws Exception {
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/1TL_RaWMjJtP7")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/1TL_RaWMjJtP7/configurations/BOQ"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/1TL_RaWMjJtP7/features/_Af7BFolVpFBPo"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/1TL_RaWMjJtP7/configurations/BOQ/features/_Af7BFolVpFBPo"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }


}
