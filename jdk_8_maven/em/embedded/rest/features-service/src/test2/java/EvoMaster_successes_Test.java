import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-07-13T21:59:33.793-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 28 tests
 * <br>
 * Covered targets: 429
 * <br>
 * Used time: 3h 0m 0s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 473L)
                .d("NAME", "\"MiqU_BEr\"")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/MiqU_BEr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("MiqU_BEr"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/swagger.json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'swagger'", containsString("2.0"))
                .body("'info'.'version'", containsString("1.0"))
                .body("'basePath'", containsString("/"))
                .body("'schemes'.size()", equalTo(1))
                .body("'schemes'", hasItems("http"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'operationId'", containsString("getConfigurationActivedFeatures"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'.size()", equalTo(4))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[2].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[2].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[2].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[2].'type'", containsString("string"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'responses'.'200'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'responses'.'200'.'schema'.'items'.'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'operationId'", containsString("addFeatureToConfiguration"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'.size()", equalTo(5))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[2].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[2].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[2].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[2].'type'", containsString("string"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'operationId'", containsString("deleteFeature"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'.size()", equalTo(5))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[2].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[2].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[2].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[2].'type'", containsString("string"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'operationId'", containsString("getConfigurationsForProduct"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'responses'.'200'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'responses'.'200'.'schema'.'items'.'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'operationId'", containsString("getConfigurationWithNameForProduct"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/ProductConfiguration"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'operationId'", containsString("addConfiguration"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'operationId'", containsString("deleteConfiguration"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'operationId'", containsString("addRequiresConstraintToProduct"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[1].'name'", containsString("sourceFeature"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[1].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[1].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[2].'name'", containsString("requiredFeature"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[2].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[2].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[2].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'operationId'", containsString("addExcludesConstraintToProduct"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[1].'name'", containsString("sourceFeature"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[1].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[1].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[2].'name'", containsString("excludedFeature"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[2].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[2].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[2].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'operationId'", containsString("deleteConstraint"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'name'", containsString("constraintId"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'type'", containsString("integer"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'format'", containsString("int64"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/features'.'get'.'operationId'", containsString("getFeaturesForProduct"))
                .body("'paths'.'/products/{productName}/features'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'schema'.'uniqueItems'", equalTo(true))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'schema'.'items'.'$ref'", containsString("#/definitions/Feature"))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'operationId'", containsString("addFeatureToProduct"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[1].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[2].'name'", containsString("description"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[2].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[2].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[2].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'operationId'", containsString("updateFeatureOfProduct"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[1].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[2].'name'", containsString("description"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[2].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[2].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[2].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Feature"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'operationId'", containsString("deleteFeatureOfProduct"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[1].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products'.'get'.'operationId'", containsString("getAllProducts"))
                .body("'paths'.'/products'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products'.'get'.'parameters'.size()", equalTo(0))
                .body("'paths'.'/products'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products'.'get'.'responses'.'200'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/products'.'get'.'responses'.'200'.'schema'.'items'.'type'", containsString("string"))
                .body("'paths'.'/products'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}'.'get'.'operationId'", containsString("getProductByName"))
                .body("'paths'.'/products/{productName}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Product"))
                .body("'paths'.'/products/{productName}'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}'.'post'.'operationId'", containsString("addProduct"))
                .body("'paths'.'/products/{productName}'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}'.'delete'.'operationId'", containsString("deleteProductByName"))
                .body("'paths'.'/products/{productName}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'definitions'.'ProductsConfigurationResource'.'type'", containsString("object"))
                .body("'definitions'.'ProductsConfigurationFeaturesResource'.'type'", containsString("object"))
                .body("'definitions'.'Feature'.'type'", containsString("object"))
                .body("'definitions'.'Feature'.'properties'.'name'.'type'", containsString("string"))
                .body("'definitions'.'Feature'.'properties'.'description'.'type'", containsString("string"))
                .body("'definitions'.'ProductConfiguration'.'type'", containsString("object"))
                .body("'definitions'.'ProductConfiguration'.'properties'.'name'.'type'", containsString("string"))
                .body("'definitions'.'ProductConfiguration'.'properties'.'valid'.'type'", containsString("boolean"))
                .body("'definitions'.'ProductConfiguration'.'properties'.'activedFeatures'.'type'", containsString("array"))
                .body("'definitions'.'ProductConfiguration'.'properties'.'activedFeatures'.'uniqueItems'", equalTo(true))
                .body("'definitions'.'ProductConfiguration'.'properties'.'activedFeatures'.'items'.'$ref'", containsString("#/definitions/Feature"))
                .body("'definitions'.'ProductsConstraintsResource'.'type'", containsString("object"))
                .body("'definitions'.'ProductsFeaturesResource'.'type'", containsString("object"))
                .body("'definitions'.'FeatureConstraint'.'type'", containsString("object"))
                .body("'definitions'.'FeatureConstraint'.'properties'.'type'.'type'", containsString("string"))
                .body("'definitions'.'Product'.'type'", containsString("object"))
                .body("'definitions'.'Product'.'properties'.'name'.'type'", containsString("string"))
                .body("'definitions'.'Product'.'properties'.'features'.'type'", containsString("array"))
                .body("'definitions'.'Product'.'properties'.'features'.'readOnly'", equalTo(true))
                .body("'definitions'.'Product'.'properties'.'features'.'uniqueItems'", equalTo(true))
                .body("'definitions'.'Product'.'properties'.'features'.'items'.'$ref'", containsString("#/definitions/Feature"))
                .body("'definitions'.'Product'.'properties'.'constraints'.'type'", containsString("array"))
                .body("'definitions'.'Product'.'properties'.'constraints'.'readOnly'", equalTo(true))
                .body("'definitions'.'Product'.'properties'.'constraints'.'uniqueItems'", equalTo(true))
                .body("'definitions'.'Product'.'properties'.'constraints'.'items'.'$ref'", containsString("#/definitions/FeatureConstraint"));
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 956L)
                .d("NAME", "\"4eFuUXLy\"")
            .and().insertInto("FEATURE", 955L)
                .d("DESCRIPTION", "\"I0FmTS\"")
                .d("NAME", "\"GXDSsiyfYl6\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/4eFuUXLy/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/n90kLReR2JThqS5")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/n90kLReR2JThqS5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("n90kLReR2JThqS5"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/xKE7puoWf1u_q")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/xKE7puoWf1u_q/configurations/1"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/xKE7puoWf1u_q/configurations/1"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("1"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 745L)
                .d("NAME", "\"izEP6\"")
            .and().insertInto("FEATURE", 744L)
                .d("NAME", "\"fyAL0mN9S\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 747L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 746L)
                .d("NAME", "\"P1bK\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 749L)
                .d("NAME", "\"dfm\"")
            .and().insertInto("FEATURE", 748L)
                .d("NAME", "\"IpyOnV\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 751L)
                .d("NAME", "\"3JGNb\"")
            .and().insertInto("FEATURE", 750L)
                .d("NAME", "\"86Vgrbv1f8hR4\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 753L)
                .d("NAME", "\"QcbcR76sZn\"")
            .and().insertInto("FEATURE", 752L)
                .d("NAME", "\"\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 758L)
                .d("NAME", "\"7tw6_7Cl9\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 757L)
                .d("NAME", "\"5M0ns\"")
            .and().insertInto("PRODUCT", 756L)
                .d("NAME", "\"jOJDEGxkkQNOhQ\"")
            .and().insertInto("FEATURE", 755L)
                .d("NAME", "\"L\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 754L)
                .r("IN_CONFIGURATIONS_ID", 757L)
                .r("ACTIVED_FEATURES_ID", 748L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/RMV0a1bUdN")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/RMV0a1bUdN/features/fTc"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/RMV0a1bUdN")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/RMV0a1bUdN/configurations/fXtbF4lUjtsrah"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_configurationName, baseUrlOfSut + "/products/RMV0a1bUdN/configurations"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("fXtbF4lUjtsrah"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/RMV0a1bUdN/configurations/fXtbF4lUjtsrah/features/fTc")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 49491L)
                .d("NAME", "\"MS\"")
            .and().insertInto("FEATURE", 49490L)
                .d("NAME", "\"_8\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 49493L)
                .d("NAME", "\"sbftiRovny\"")
            .and().insertInto("FEATURE", 49492L)
                .d("NAME", "\"ddV5wIvyzNnm1p\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/f4VQZurSWN")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/f4VQZurSWN/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/f4VQZurSWN/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/f4VQZurSWN")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/f4VQZurSWN")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("f4VQZurSWN"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(2))
                .body("'constraints'[0].'sourceFeatureName'", nullValue())
                .body("'constraints'[0].'requiredFeatureName'", nullValue())
                .body("'constraints'[0].'type'", containsString("requires"))
                .body("'constraints'[1].'sourceFeatureName'", nullValue())
                .body("'constraints'[1].'requiredFeatureName'", nullValue())
                .body("'constraints'[1].'type'", containsString("requires"));
        
        List<InsertionDto> insertions2 = sql(insertions).insertInto("PRODUCT", 39505L)
                .d("NAME", "\"f4VQZurSWN\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 39504L)
                .d("NAME", "\"hn\"")
                .d("VALID", "false")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions2result = controller.execInsertionsIntoDatabase(insertions2, insertionsresult);
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/f4VQZurSWN")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/f4VQZurSWN/configurations/hn"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 745L)
                .d("NAME", "\"izEP6\"")
            .and().insertInto("FEATURE", 744L)
                .d("NAME", "\"fyAL0mN9S\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 747L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 746L)
                .d("NAME", "\"P1bK\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 749L)
                .d("NAME", "\"dfm\"")
            .and().insertInto("FEATURE", 748L)
                .d("NAME", "\"IpyOnV\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 751L)
                .d("NAME", "\"3JGNb\"")
            .and().insertInto("FEATURE", 750L)
                .d("NAME", "\"86Vgrbv1f8hR4\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 753L)
                .d("NAME", "\"QcbcR76sZn\"")
            .and().insertInto("FEATURE", 752L)
                .d("NAME", "\"\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 758L)
                .d("NAME", "\"7tw6_7Cl9\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 757L)
                .d("NAME", "\"5M0ns\"")
            .and().insertInto("PRODUCT", 756L)
                .d("NAME", "\"jOJDEGxkkQNOhQ\"")
            .and().insertInto("FEATURE", 755L)
                .d("NAME", "\"L\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 754L)
                .r("IN_CONFIGURATIONS_ID", 757L)
                .r("ACTIVED_FEATURES_ID", 748L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/o")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/o/configurations/uTom2GZhNNhH_MN"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_configurationName, baseUrlOfSut + "/products/o/configurations"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("uTom2GZhNNhH_MN"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("", hasItems("izEP6", "", "dfm", "3JGNb", "QcbcR76sZn", "7tw6_7Cl9", "jOJDEGxkkQNOhQ", "o"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 745L)
                .d("NAME", "\"izEP6\"")
            .and().insertInto("FEATURE", 744L)
                .d("NAME", "\"fyAL0mN9S\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 747L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 746L)
                .d("NAME", "\"P1bK\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 749L)
                .d("NAME", "\"dfm\"")
            .and().insertInto("FEATURE", 748L)
                .d("NAME", "\"IpyOnV\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 751L)
                .d("NAME", "\"3JGNb\"")
            .and().insertInto("FEATURE", 750L)
                .d("NAME", "\"86Vgrbv1f8hR4\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 753L)
                .d("NAME", "\"QcbcR76sZn\"")
            .and().insertInto("FEATURE", 752L)
                .d("NAME", "\"\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 758L)
                .d("NAME", "\"7tw6_7Cl9\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 757L)
                .d("NAME", "\"5M0ns\"")
            .and().insertInto("PRODUCT", 756L)
                .d("NAME", "\"jOJDEGxkkQNOhQ\"")
            .and().insertInto("FEATURE", 755L)
                .d("NAME", "\"L\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 754L)
                .r("IN_CONFIGURATIONS_ID", 757L)
                .r("ACTIVED_FEATURES_ID", 748L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/QywfqY")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/QywfqY/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/QywfqY")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/QywfqY/features/fTc"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/QywfqY")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/QywfqY/configurations/fXtbF4lUjtsrah"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_configurationName, baseUrlOfSut + "/products/QywfqY/configurations"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("fXtbF4lUjtsrah"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/QywfqY/configurations/fXtbF4lUjtsrah/features/fTc")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        String location_productName = "";
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 100583L)
                .d("NAME", "\"F0xqiH1uoR2kjOL\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 100582L)
                .d("ID", "286")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"ee0\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/F0xqiH1uoR2kjOL")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/F0xqiH1uoR2kjOL/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/F0xqiH1uoR2kjOL")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("F0xqiH1uoR2kjOL"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(1))
                .body("'constraints'[0].'sourceFeatureName'", nullValue())
                .body("'constraints'[0].'excludedFeatureName'", nullValue())
                .body("'constraints'[0].'type'", containsString("excludes"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/F0xqiH1uoR2kjOL")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/F0xqiH1uoR2kjOL/features/bra"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/F0xqiH1uoR2kjOL/features/bra"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("bra"))
                .body("'description'", nullValue());
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/F0xqiH1uoR2kjOL")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/F0xqiH1uoR2kjOL/configurations/1WK3"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/F0xqiH1uoR2kjOL/configurations/1WK3"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2685L)
                .d("NAME", "\"UNION\"")
            .and().insertInto("FEATURE", 2684L)
                .d("NAME", "\"CREATE MEMORY TABLE PUBLIC.PRODUCT_CONFIGURATION_ACTIVED_FEATURES(\n    IN_CONFIGURATIONS_ID BIGINT NOT NULL,\n    ACTIVED_FEATURES_ID BIGINT NOT NULL\n)\"")
                .r("PRODUCT_ID", 2685L)
            .and().insertInto("PRODUCT", 2687L)
                .d("NAME", "\"beJVKfm7\"")
            .and().insertInto("FEATURE", 2686L)
                .d("NAME", "\"dUDFE3gp\"")
                .r("PRODUCT_ID", 2687L)
            .and().insertInto("PRODUCT", 2692L)
                .d("NAME", "\"kUeU7LUE7UUU\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2691L)
                .d("NAME", "\"_EM_35203_XYZ_\"")
            .and().insertInto("PRODUCT", 2690L)
                .d("NAME", "\"620381\"")
            .and().insertInto("FEATURE", 2689L)
                .d("NAME", "\"1159590\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2688L)
                .r("IN_CONFIGURATIONS_ID", 2691L)
                .r("ACTIVED_FEATURES_ID", 2689L)
            .and().insertInto("PRODUCT", 2697L)
                .d("NAME", "\"kge97LhE7x2oQ\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2696L)
                .d("NAME", "\"623460\"")
            .and().insertInto("PRODUCT", 2695L)
                .d("NAME", "\"tuPxwCp\u0082j\"")
            .and().insertInto("FEATURE", 2694L)
                .d("NAME", "\"_EM_35079_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2693L)
                .r("IN_CONFIGURATIONS_ID", 2691L)
                .r("ACTIVED_FEATURES_ID", 2686L)
            .and().insertInto("PRODUCT", 2702L)
                .d("NAME", "\"_EM_12976_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2701L)
                .d("NAME", "\"_EM_35080_XYZ_\"")
            .and().insertInto("PRODUCT", 2700L)
                .d("NAME", "\"_EM_35081_XYZ_\"")
            .and().insertInto("FEATURE", 2699L)
                .d("NAME", "\"_EM_35204_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2698L)
                .r("IN_CONFIGURATIONS_ID", 2701L)
                .r("ACTIVED_FEATURES_ID", 2699L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/mn7ZWIxqaMeL")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/mn7ZWIxqaMeL/features/_EM_35077_XYZ_G"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/mn7ZWIxqaMeL/features/_EM_35077_XYZ_G"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EM_35077_XYZ_G"))
                .body("'description'", nullValue());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/mn7ZWIxqaMeL")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=U2Hm&excludedFeature=_EM_35201_XYZ_")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/mn7ZWIxqaMeL/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=_EM_35077_XYZ_G&excludedFeature=_EM_35076_XYZ_")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/mn7ZWIxqaMeL/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/mn7ZWIxqaMeL")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/mn7ZWIxqaMeL/configurations/_EM_12972_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=NN0fdZBnGZE")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/mn7ZWIxqaMeL/features/_EM_35077_XYZ_G"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/mn7ZWIxqaMeL/configurations/ppwgXL4mP/features/_EM_35077_XYZ_G"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/mn7ZWIxqaMeL/configurations/_EM_12972_XYZ_/features/_EM_35077_XYZ_G"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/FPDg/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/uxawPkbtfN")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/uxawPkbtfN/features/Fd6J8uR"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/uxawPkbtfN/features/Fd6J8uR"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Fd6J8uR"))
                .body("'description'", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2685L)
                .d("NAME", "\"gVocO\"")
            .and().insertInto("FEATURE", 2684L)
                .d("NAME", "\"_EM_12973_XYZ_\"")
                .r("PRODUCT_ID", 2685L)
            .and().insertInto("PRODUCT", 2687L)
                .d("NAME", "\"_EM_12974_XYZ_\"")
            .and().insertInto("FEATURE", 2686L)
                .d("NAME", "\"_EM_12975_XYZ_\"")
                .r("PRODUCT_ID", 2685L)
            .and().insertInto("PRODUCT", 2692L)
                .d("NAME", "\"Xwqw\u0082XW\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2691L)
                .d("NAME", "\"ODKSwVO5\"")
            .and().insertInto("PRODUCT", 2690L)
                .d("NAME", "\"620381\"")
            .and().insertInto("FEATURE", 2689L)
                .d("NAME", "\"UezUFU\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2688L)
                .r("IN_CONFIGURATIONS_ID", 2691L)
                .r("ACTIVED_FEATURES_ID", 2689L)
            .and().insertInto("PRODUCT", 2697L)
                .d("NAME", "\"kge97LhE7x2oQ\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2696L)
                .d("NAME", "\"623460\"")
            .and().insertInto("PRODUCT", 2695L)
                .d("NAME", "\"tuPxwCprj\"")
            .and().insertInto("FEATURE", 2694L)
                .d("NAME", "\"29hstT9VSKd\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2693L)
                .r("IN_CONFIGURATIONS_ID", 2691L)
                .r("ACTIVED_FEATURES_ID", 2694L)
            .and().insertInto("PRODUCT", 2702L)
                .d("NAME", "\"_EM_12976_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2701L)
                .d("NAME", "\"KoYUUU\"")
            .and().insertInto("PRODUCT", 2700L)
                .d("NAME", "\"c5HFr_9H\"")
            .and().insertInto("FEATURE", 2699L)
                .d("NAME", "\"_EM_4294_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2698L)
                .r("IN_CONFIGURATIONS_ID", 2701L)
                .r("ACTIVED_FEATURES_ID", 2699L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/ppwgXL4mP")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ppwgXL4mP/features/_EM_4285_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("description=BmWR")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/ppwgXL4mP/features/_EM_4285_XYZ_"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EM_4285_XYZ_"))
                .body("'description'", containsString("BmWR"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/ppwgXL4mP")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ppwgXL4mP/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=&excludedFeature=86c_QQaG72HJ")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ppwgXL4mP/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/ppwgXL4mP")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ppwgXL4mP/configurations/_EM_12972_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=NN0fdZBnGZE")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/ppwgXL4mP/features/_EM_4285_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/ppwgXL4mP/configurations/_EM_12972_XYZ_/features/_EM_4285_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/ppwgXL4mP/configurations/_EM_12972_XYZ_/features/_EM_4285_XYZ_"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2685L)
                .d("NAME", "\"UasLBjv9W\"")
            .and().insertInto("FEATURE", 2684L)
                .d("NAME", "\"talVsxtGz6cBo\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 2687L)
                .d("NAME", "\"beJVKfm7\"")
            .and().insertInto("FEATURE", 2686L)
                .d("NAME", "\"l_sQfME_YSsnK\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 2692L)
                .d("NAME", "\"XwqwrXW\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2691L)
                .d("NAME", "\"ODKSwVO5\"")
            .and().insertInto("PRODUCT", 2690L)
                .d("NAME", "\"fHU\"")
            .and().insertInto("FEATURE", 2689L)
                .d("NAME", "\"yezNFn\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2688L)
                .r("IN_CONFIGURATIONS_ID", 2691L)
                .r("ACTIVED_FEATURES_ID", 2684L)
            .and().insertInto("PRODUCT", 2697L)
                .d("NAME", "\"kge97LhE7x2oQ\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2696L)
                .d("NAME", "\"a6\"")
            .and().insertInto("PRODUCT", 2695L)
                .d("NAME", "\"8JF9BQunvK_Ws\"")
            .and().insertInto("FEATURE", 2694L)
                .d("NAME", "\"29hstT9VSKd\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2693L)
                .r("IN_CONFIGURATIONS_ID", 2696L)
                .r("ACTIVED_FEATURES_ID", 2684L)
            .and().insertInto("PRODUCT", 2702L)
                .d("NAME", "\"mn7ZWIxqaMeL\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2701L)
                .d("NAME", "\"KoYUpY\"")
            .and().insertInto("PRODUCT", 2700L)
                .d("NAME", "\"am9HzxdC4DN\"")
            .and().insertInto("FEATURE", 2699L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2698L)
                .r("IN_CONFIGURATIONS_ID", 2701L)
                .r("ACTIVED_FEATURES_ID", 2684L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/2ff90oddNkuE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=EqyIBQZ8ldaxZ")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/2ff90oddNkuE/features/Y_1vjccC2"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/2ff90oddNkuE/features/Y_1vjccC2"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Y_1vjccC2"))
                .body("'description'", nullValue());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/2ff90oddNkuE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/2ff90oddNkuE/configurations/3fp023XYMZs"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/2ff90oddNkuE/features/Y_1vjccC2"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/2ff90oddNkuE/configurations/3fp023XYMZs/features/Y_1vjccC2"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/2ff90oddNkuE/configurations/3fp023XYMZs/features/Y_1vjccC2"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/zyt2Y9AgtyWLLX0z")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/zyt2Y9AgtyWLLX0z/configurations/K2tpi0S0"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 603291L)
                .d("NAME", "\"JsKB\"")
            .and().insertInto("FEATURE", 603290L)
                .d("NAME", "\"np4Z0u2VxhGDE\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 603293L)
                .d("NAME", "\"Tp\"")
            .and().insertInto("FEATURE", 603292L)
                .d("NAME", "\"JkgM1\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 603295L)
                .d("NAME", "\"B1Fjr7hYmmyWJ\"")
            .and().insertInto("FEATURE", 603294L)
                .d("NAME", "\"11f62yVw1u9h0O\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 603300L)
                .d("NAME", "\"tezWwAv\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 603299L)
                .d("NAME", "\"ycL1Lor3fSlW\"")
            .and().insertInto("PRODUCT", 603298L)
                .d("NAME", "\"QI50ShptORM\"")
            .and().insertInto("FEATURE", 603297L)
                .d("NAME", "\"G5pZ\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 603296L)
                .r("IN_CONFIGURATIONS_ID", 603299L)
                .r("ACTIVED_FEATURES_ID", 603292L)
            .and().insertInto("PRODUCT", 603305L)
                .d("NAME", "\"s7wkqFI2ptb7MMhK\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 603304L)
                .d("NAME", "\"LSqDAh\"")
            .and().insertInto("PRODUCT", 603303L)
                .d("NAME", "\"7Khp87q\"")
            .and().insertInto("FEATURE", 603302L)
                .d("NAME", "\"f9BzfD\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 603301L)
                .r("IN_CONFIGURATIONS_ID", 603304L)
                .r("ACTIVED_FEATURES_ID", 603297L)
            .and().insertInto("PRODUCT", 603310L)
                .d("NAME", "\"3KQHJJFC\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 603309L)
                .d("NAME", "\"rRO528QheS8G\"")
            .and().insertInto("PRODUCT", 603308L)
                .d("NAME", "\"i5bxuyBY5n_FJWy\"")
            .and().insertInto("FEATURE", 603307L)
                .d("NAME", "\"4\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 603306L)
                .r("IN_CONFIGURATIONS_ID", 603304L)
                .r("ACTIVED_FEATURES_ID", 603302L)
            .and().insertInto("PRODUCT", 603315L)
                .d("NAME", "\"YdtE\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 603314L)
                .d("NAME", "\"na9xhyie8d1h\"")
            .and().insertInto("PRODUCT", 603313L)
                .d("NAME", "\"AQ\"")
            .and().insertInto("FEATURE", 603312L)
                .d("NAME", "\"cN5vH879r\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 603311L)
                .r("IN_CONFIGURATIONS_ID", 603314L)
                .r("ACTIVED_FEATURES_ID", 603297L)
            .and().insertInto("PRODUCT", 603320L)
                .d("NAME", "\"6l3o1DykkB\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 603319L)
                .d("NAME", "\"yF9tfKE\"")
            .and().insertInto("PRODUCT", 603318L)
                .d("NAME", "\"q_DAjnC\"")
            .and().insertInto("FEATURE", 603317L)
                .d("NAME", "\"Cf1rwISn\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 603316L)
                .r("IN_CONFIGURATIONS_ID", 603299L)
                .r("ACTIVED_FEATURES_ID", 603294L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/rGPJTolV9vlzW")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/rGPJTolV9vlzW/features/kKnQBAFwnUdU98t"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/rGPJTolV9vlzW")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/rGPJTolV9vlzW/configurations/xYNhEHeCIAu"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/rGPJTolV9vlzW/features/kKnQBAFwnUdU98t"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/rGPJTolV9vlzW/configurations/xYNhEHeCIAu/features/kKnQBAFwnUdU98t"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/aAVCnH5")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/aAVCnH5/configurations/gdDXkXcnesQNWINq"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/aAVCnH5/configurations/gdDXkXcnesQNWINq"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/BLoC")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/BLoC")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/PR4j")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/SQ49w_xfvfx")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/SQ49w_xfvfx/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/YzSkFNEC0")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/YzSkFNEC0/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/wxr2h8")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/wxr2h8/features/oyb5Eb9Vrlfhlzc"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/wxr2h8/features/oyb5Eb9Vrlfhlzc"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/in4EBPU")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/in4EBPU/features/_ByloO"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 348L)
                .d("NAME", "\"Pnnx\"")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/Pnnx")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/bKSJwJ/configurations/xvagGsL7EK")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/Rno5QdYMfNM_ltq/constraints/339")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }


}
