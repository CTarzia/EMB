import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-07-13T21:59:33.761-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 39 tests
 * <br>
 * Covered targets: 298
 * <br>
 * Used time: 3h 0m 0s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 2025L)
                .d("NAME", "\"NMjL8t\"")
            .and().insertInto("FEATURE", 2024L)
                .d("DESCRIPTION", "NULL")
                .d("NAME", "\"VmmTSDs5\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/NMjL8t/features/VmmTSDs5")
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 1729L)
                .d("NAME", "\"cgSdudwo\"")
            .and().insertInto("FEATURE", 1728L)
                .d("DESCRIPTION", "\"Ag7RMZwtHnzJ\"")
                .d("NAME", "\"Wal7aTY_o\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/cgSdudwo/features/Wal7aTY_o")
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/ZGQNm1W9")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/Kvx6qSfEbovzXCL/configurations/tog")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_4_with500() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/MCCWV6C/constraints/requires")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_5_with500() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/CsYd7pBTC9g3q95/constraints/excludes")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_6_with500() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/cQD/features/UwMWQC8d")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_7_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_7_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2513L)
                .d("NAME", "\"_EM_3772_XYZ_\"")
            .and().insertInto("FEATURE", 2512L)
                .d("NAME", "\"qtKNO1TExLupzFx_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 2515L)
                .d("NAME", "\"89V_DHM63A\"")
            .and().insertInto("FEATURE", 2514L)
                .d("NAME", "\"_EM_3773_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 2520L)
                .d("NAME", "\"SpCo93F5gIg\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2519L)
                .d("NAME", "\"wBSp\"")
            .and().insertInto("PRODUCT", 2518L)
                .d("NAME", "\"_EM_3774_XYZ_\"")
            .and().insertInto("FEATURE", 2517L)
                .d("NAME", "\"_EM_3775_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2516L)
                .r("IN_CONFIGURATIONS_ID", 2519L)
                .r("ACTIVED_FEATURES_ID", 2517L)
            .and().insertInto("PRODUCT", 2525L)
                .d("NAME", "\"_EM_3776_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2524L)
                .d("NAME", "\"E1ajPlzKY5l\"")
            .and().insertInto("PRODUCT", 2523L)
                .d("NAME", "\"VdiW7hrYL\"")
            .and().insertInto("FEATURE", 2522L)
                .d("NAME", "\"Vw7UwD9xW\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2521L)
                .r("IN_CONFIGURATIONS_ID", 2519L)
                .r("ACTIVED_FEATURES_ID", 2512L)
            .and().insertInto("PRODUCT", 2530L)
                .d("NAME", "\"_EM_3777_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2529L)
                .d("NAME", "\"_EM_3778_XYZ_\"")
            .and().insertInto("PRODUCT", 2528L)
                .d("NAME", "\"_EM_3779_XYZ_\"")
            .and().insertInto("FEATURE", 2527L)
                .d("NAME", "\"iVAGbS1AW\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2526L)
                .r("IN_CONFIGURATIONS_ID", 2524L)
                .r("ACTIVED_FEATURES_ID", 2517L)
            .and().insertInto("PRODUCT", 2535L)
                .d("NAME", "\"xmT4gOLYGagMM2P\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2534L)
                .d("NAME", "\"_EM_3780_XYZ_\"")
            .and().insertInto("PRODUCT", 2533L)
                .d("NAME", "\"21EYkSGlQi\"")
            .and().insertInto("FEATURE", 2532L)
                .d("NAME", "\"Kvh5n19qY\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2531L)
                .r("IN_CONFIGURATIONS_ID", 2529L)
                .r("ACTIVED_FEATURES_ID", 2512L)
            .and().insertInto("PRODUCT", 2540L)
                .d("NAME", "\"CRlIrY\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2539L)
                .d("NAME", "\"Mv\"")
            .and().insertInto("PRODUCT", 2538L)
                .d("NAME", "\"_EM_3781_XYZ_\"")
            .and().insertInto("FEATURE", 2537L)
                .d("NAME", "\"TNu\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2536L)
                .r("IN_CONFIGURATIONS_ID", 2529L)
                .r("ACTIVED_FEATURES_ID", 2527L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/EdLcVllYM@4")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/EdLcVllYM@4/configurations/_EM%5D3UUU%5BHYZU"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsConfigurationResource_42_addConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_8_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_8_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 41142L)
                .d("NAME", "\"Qpb9tg\"")
            .and().insertInto("FEATURE", 41141L)
                .d("NAME", "\"_EM_50964_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/2i%3FT")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products"))
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    /**
    * [test_9_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_9_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/vjiAj1Pu_WosS9A/features/oY8pmBc")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_10_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_10_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/SBLBW3t63u/features")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_11_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_11_with500() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/rzlXUoQtUhyAI/configurations/tYf_gpCokrS/features/ygAdqdHbfy4ru")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_79_addFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_12_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_12_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 1038186L)
                .d("NAME", "\"tfRxd\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1038185L)
                .d("ID", "-1783129830")
            .and().insertInto("PRODUCT", 1038188L)
                .d("NAME", "\"Rr_sUaHk\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1038187L)
                .d("ID", "260")
            .and().insertInto("PRODUCT", 1038190L)
                .d("NAME", "\"\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1038189L)
                .d("ID", "166")
            .and().insertInto("PRODUCT", 1038192L)
                .d("NAME", "\"WyD6FIrs\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1038191L)
                .d("ID", "860")
            .and().insertInto("PRODUCT", 1038194L)
                .d("NAME", "\"3\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 1038193L)
                .d("ID", "18")
            .and().insertInto("PRODUCT", 1038196L)
                .d("NAME", "\"EDNr8r\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1038195L)
                .d("ID", "852")
            .and().insertInto("PRODUCT", 1038198L)
                .d("NAME", "\"R_Q55zhU000jaf\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1038197L)
                .d("ID", "60")
            .and().insertInto("PRODUCT", 1038200L)
                .d("NAME", "\"O8gJCoO7ki9aRGp\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1038199L)
                .d("ID", "504")
            .and().insertInto("PRODUCT", 1038202L)
                .d("NAME", "\"kOVS\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1038201L)
                .d("ID", "2034772987")
            .and().insertInto("PRODUCT", 1038204L)
                .d("NAME", "\"XDkj6WrPXaW\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 1038203L)
                .d("ID", "620")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/JYM4dMs4_C0je3KJ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("excludedFeature=HKYlVVBNNw2eeA")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/JYM4dMs4_C0je3KJ/constraints/excludes"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_110_addExcludesConstraintToProduct
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/JYM4dMs4_C0je3KJ/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    /**
    * [test_13_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_13_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 871263L)
                .d("NAME", "\"2wMw6OM0HJnj\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 871262L)
                .d("ID", "290")
            .and().insertInto("PRODUCT", 871265L)
                .d("NAME", "\"JUhU5V\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 871264L)
                .d("ID", "8373271198122336143")
            .and().insertInto("PRODUCT", 871267L)
                .d("NAME", "\"k\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 871266L)
                .d("ID", "18")
            .and().insertInto("PRODUCT", 871269L)
                .d("NAME", "\"rWCgW\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 871268L)
                .d("ID", "61")
            .and().insertInto("PRODUCT", 871271L)
                .d("NAME", "\"GXMRH_dl3SWMbGyq\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 871270L)
                .d("ID", "793")
            .and().insertInto("PRODUCT", 871273L)
                .d("NAME", "\"CFz01T\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 871272L)
                .d("ID", "915774536")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/pFTfW0KNE/constraints/954624948042128603")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/wJZTSoE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("requiredFeature=nTCCf2yQ39F")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/wJZTSoE/constraints/requires"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_96_addRequiresConstraintToProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_14_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_14_with500() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/CxFyPupZlsepCHnq/configurations/MDuw4_bzfX")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsConfigurationsDAO_71_deleteConfigurationForProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_15_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_15_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 745L)
                .d("NAME", "\"_EM_1286_XYZ_\"")
            .and().insertInto("FEATURE", 744L)
                .d("NAME", "\"fyAL0mN9S\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 747L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 746L)
                .d("NAME", "\"P1bK\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 749L)
                .d("NAME", "\"_EM_1287_XYZ_\"")
            .and().insertInto("FEATURE", 748L)
                .d("NAME", "\"IpyOnV\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 751L)
                .d("NAME", "\"3JGNb\"")
            .and().insertInto("FEATURE", 750L)
                .d("NAME", "\"86Vgrbv1f8hR4\"")
                .r("PRODUCT_ID", 745L)
            .and().insertInto("PRODUCT", 753L)
                .d("NAME", "\"QcbcR76sZn\"")
            .and().insertInto("FEATURE", 752L)
                .d("NAME", "\"_EM_1288_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 758L)
                .d("NAME", "\"7tw6_7Cl9\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 757L)
                .d("NAME", "\"5M0ns\"")
            .and().insertInto("PRODUCT", 756L)
                .d("NAME", "\"jOJDEGxkkQNMhQ\"")
            .and().insertInto("FEATURE", 755L)
                .d("NAME", "\"_EM_1289_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 754L)
                .r("IN_CONFIGURATIONS_ID", 757L)
                .r("ACTIVED_FEATURES_ID", 748L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_1282_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_1282_XYZ_/features/_EM_1284_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_1282_XYZ_/features/_EM_1284_XYZ_"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EM_1284_XYZ_"))
                .body("'description'", nullValue());
        
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_12@5_XaZ%5B")
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsResource_58_addProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_16_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_16_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 120646L)
                .d("NAME", "\"um\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 120645L)
                .d("NAME", "\"5T0UCRW9HaLW\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/Xs56BEWHwc5qJ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Xs56BEWHwc5qJ/configurations/8Mub_K9uwkDZPMi"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_configurationName, baseUrlOfSut + "/products/Xs56BEWHwc5qJ/configurations"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("8Mub_K9uwkDZPMi"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/Xs56BEWHwc5qJ/configurations/8Mub_K9uwkDZPMi/features/NqXi0iYwpTBLP")
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_17_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_17_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 153986L)
                .d("NAME", "\"lkLR9QJc3BEGjDV\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 153985L)
                .d("NAME", "\"saMyUkzQO2\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        List<InsertionDto> insertions0 = sql(insertions).insertInto("PRODUCT", 117099L)
                .d("NAME", "\"_EM_165363_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 117098L)
                .d("NAME", "\"r7\"")
                .d("VALID", "false")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0, insertionsresult);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/_EM_165363_XYZ_/configurations/r7/features")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_165363_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_165363_XYZ_/features/;xyWajA"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_165363_XYZ_/features/;xyWajA?U_XYZU=%40RNktD8i"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
    }
    
    
    /**
    * [test_18_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_18_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/Fa4nWBPu0TP/configurations/Xaqrqg6sM3wH/features")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_19_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_19_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 322407L)
                .d("NAME", "\"su\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 322406L)
                .d("NAME", "\"l8gjsKeWVl\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/0Wo4ajCYX85uIkXd")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/0Wo4ajCYX85uIkXd/configurations/y783tRPg1"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_configurationName, baseUrlOfSut + "/products/0Wo4ajCYX85uIkXd/configurations?U_XYZU="))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("y783tRPg1"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
        List<InsertionDto> insertions1 = sql(insertions).insertInto("PRODUCT", 117099L)
                .d("NAME", "\"0Wo4ajCYX85uIkXd\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 117098L)
                .d("NAME", "\"y783tRPg1\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions1result = controller.execInsertionsIntoDatabase(insertions1, insertionsresult);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/0Wo4ajCYX85uIkXd/configurations/y783tRPg1/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/h/features/9q0OxdudkXU")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_20_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_20_with500() throws Exception {
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/X")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/X/features/mxP6nx"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        List<InsertionDto> insertions1 = sql().insertInto("PRODUCT", 101363L)
                .d("NAME", "\"X\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 101362L)
                .d("NAME", "\"fvDINznQ\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions1result = controller.execInsertionsIntoDatabase(insertions1);
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/X")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/X/configurations/fvDINznQ"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/X/features/mxP6nx"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/X/configurations/fvDINznQ/features/mxP6nx"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/X/configurations/fvDINznQ/features/mxP6nx"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_80_addFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_21_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_21_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2366L)
                .d("NAME", "\"_EM_133425_XYZ_\"")
            .and().insertInto("FEATURE", 2365L)
                .d("NAME", "\"\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 2368L)
                .d("NAME", "\"cWfEeq\"")
            .and().insertInto("FEATURE", 2367L)
                .d("NAME", "\"0TK7l\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 2370L)
                .d("NAME", "\"_EM_133426_XYZ_\"")
            .and().insertInto("FEATURE", 2369L)
                .d("NAME", "\"WcXZq\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 2372L)
                .d("NAME", "\"t\"")
            .and().insertInto("FEATURE", 2371L)
                .d("NAME", "\"oI\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 2374L)
                .d("NAME", "\"UaNaMm_ZJkgg_jfN\"")
            .and().insertInto("FEATURE", 2373L)
                .d("NAME", "\"igM5k3\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 2379L)
                .d("NAME", "\"g9suoS45qSKb\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2378L)
                .d("NAME", "\"_EM_133427_XYZ_\"")
            .and().insertInto("PRODUCT", 2377L)
                .d("NAME", "\"nua0xKgRRr\"")
            .and().insertInto("FEATURE", 2376L)
                .d("NAME", "\"YTQxDbxdw_gyfr6z\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2375L)
                .r("IN_CONFIGURATIONS_ID", 2378L)
                .r("ACTIVED_FEATURES_ID", 2371L)
            .and().insertInto("PRODUCT", 16729L)
                .d("NAME", "\"_EM_133428_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 16728L)
                .d("ID", "671323639851523779")
            .and().insertInto("PRODUCT", 16731L)
                .d("NAME", "\"RNtE5\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 16730L)
                .d("ID", "176")
            .and().insertInto("PRODUCT", 16733L)
                .d("NAME", "\"fspW\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 16732L)
                .d("ID", "993")
            .and().insertInto("PRODUCT", 16735L)
                .d("NAME", "\"6XUpd\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 16734L)
                .d("ID", "233")
            .and().insertInto("PRODUCT", 16737L)
                .d("NAME", "\"1A5POZCNSkOGqaTf\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 16736L)
                .d("ID", "4194390")
            .and().insertInto("PRODUCT", 16739L)
                .d("NAME", "\"H6DB\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 16738L)
                .d("ID", "385")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_133423_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_133423_XYZ_/configurations/g%5C%5DlAPUoDi"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_133423_XYZ_/configurations/g%5C%5DlAPUoDi"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_133424_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_133424_XYZ_/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_133424_XYZ_/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/S7")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/_EM_133424_XYZ_/constraints/-208585323392340762")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    /**
    * [test_22_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_22_with500() throws Exception {
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/SfGbh3TQEt40")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/SfGbh3TQEt40/configurations/5cvqrUJdWEBH1sKP"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=jyWNyaD9nc")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/SfGbh3TQEt40/features/8cnpcD"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/SfGbh3TQEt40/configurations/5cvqrUJdWEBH1sKP/features/8cnpcD"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/SfGbh3TQEt40/configurations/5cvqrUJdWEBH1sKP/features/8cnpcD"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_23_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_23_with500() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/Bv22vVD9")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_24_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_24_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 452L)
                .d("NAME", "\"hSej1W\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 451L)
                .d("NAME", "\"rXkcmN4UV4uqZ\"")
            .and().insertInto("PRODUCT", 454L)
                .d("NAME", "\"_yzu\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 453L)
                .d("NAME", "\"_EM_6200_XYZ_\"")
            .and().insertInto("PRODUCT", 456L)
                .d("NAME", "\"_EM_27937_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 455L)
                .d("NAME", "\"_EM_6201_XYZ_\"")
            .and().insertInto("PRODUCT", 458L)
                .d("NAME", "\"_EM_27938_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 457L)
                .d("NAME", "\"3uKJHV21_9z7MC\"")
            .and().insertInto("PRODUCT", 460L)
                .d("NAME", "\"_EM_6203_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 459L)
                .d("NAME", "\"5EmlrtKDb6ZTxUb\"")
            .and().insertInto("PRODUCT", 971L)
                .d("NAME", "\"_EM_6204_XYZ_\"")
            .and().insertInto("FEATURE", 970L)
                .d("NAME", "\"_EM_27939_XYZ_\"")
                .r("PRODUCT_ID", 454L)
            .and().insertInto("PRODUCT", 973L)
                .d("NAME", "\"_GI_UUUU_hUU_\"")
            .and().insertInto("FEATURE", 972L)
                .d("NAME", "\"_EM_27940_XYZ_\"")
                .r("PRODUCT_ID", 458L)
            .and().insertInto("PRODUCT", 975L)
                .d("NAME", "\"_EM_27941_XYZ_\"")
            .and().insertInto("FEATURE", 974L)
                .d("NAME", "\"_EM_6206_XYZ_\"")
                .r("PRODUCT_ID", 456L)
            .and().insertInto("PRODUCT", 977L)
                .d("NAME", "\"_EM_27942_XYZ_\"")
            .and().insertInto("FEATURE", 976L)
                .d("NAME", "\"_EM_27943_XYZ_\"")
                .r("PRODUCT_ID", 975L)
            .and().insertInto("PRODUCT", 979L)
                .d("NAME", "\"CIj6IZAS\"")
            .and().insertInto("FEATURE", 978L)
                .d("NAME", "\"_EM_6208_XYZ_\"")
                .r("PRODUCT_ID", 973L)
            .and().insertInto("PRODUCT", 984L)
                .d("NAME", "\"8cgQqe1\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 983L)
                .d("NAME", "\"Dt_Wfiten\"")
            .and().insertInto("PRODUCT", 982L)
                .d("NAME", "\"yddpyyAw\"")
            .and().insertInto("FEATURE", 981L)
                .d("NAME", "\"_EM_27944_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 980L)
                .r("IN_CONFIGURATIONS_ID", 455L)
                .r("ACTIVED_FEATURES_ID", 972L)
            .and().insertInto("PRODUCT", 989L)
                .d("NAME", "\"d1Z26\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 988L)
                .d("NAME", "\"_EM_27945_XYZ_\"")
            .and().insertInto("PRODUCT", 987L)
                .d("NAME", "\"iNVsxBJ9D5zL\"")
            .and().insertInto("FEATURE", 986L)
                .d("NAME", "\"_EM_27946_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 985L)
                .r("IN_CONFIGURATIONS_ID", 459L)
                .r("ACTIVED_FEATURES_ID", 981L)
            .and().insertInto("PRODUCT", 994L)
                .d("NAME", "\"_EM_6213_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 993L)
                .d("NAME", "\"_EM_6214_XYZ_\"")
            .and().insertInto("PRODUCT", 992L)
                .d("NAME", "\"_EM_27947_XYZ_\"")
            .and().insertInto("FEATURE", 991L)
                .d("NAME", "\"M%\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 990L)
                .r("IN_CONFIGURATIONS_ID", 983L)
                .r("ACTIVED_FEATURES_ID", 972L)
            .and().insertInto("PRODUCT", 22451L)
                .d("NAME", "\"Du\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 22450L)
                .d("ID", "543")
            .and().insertInto("PRODUCT", 22453L)
                .d("NAME", "\"A37\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 22452L)
                .d("ID", "842")
            .and().insertInto("PRODUCT", 22455L)
                .d("NAME", "\"O7F\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 22454L)
                .d("ID", "1013694367637116170")
            .and().insertInto("PRODUCT", 22457L)
                .d("NAME", "\"_EM_27948_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 22456L)
                .d("ID", "-523744")
            .and().insertInto("PRODUCT", 22459L)
                .d("NAME", "\"F1SiKd4Tp2HF\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 22458L)
                .d("ID", "-1225977837521594835")
            .and().insertInto("PRODUCT", 22461L)
                .d("NAME", "\"_EM_27949_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 22460L)
                .d("ID", "969")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_6196_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_6196_XYZ_/features/_EM_27936_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/d1Z26/features/_EM_27936_XYZ_"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/A_LeX6x4Msy/configurations/_EM_6198_XYZ_")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/%3FANodFEYZl")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/%3FANodFEYZl/constraints/33727"))
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/%3FANodFEYZl/configurations/_EM_6199_XYZ_/features")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
    }
    
    
    /**
    * [test_25_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_25_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 45753L)
                .d("NAME", "\"Tc0G52bWnKke\"")
            .and().insertInto("FEATURE", 45752L)
                .d("NAME", "\"Ev4qOiG\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 45755L)
                .d("NAME", "\"_EM_62774_XYZ_\"")
            .and().insertInto("FEATURE", 45754L)
                .d("NAME", "\"mmvBwSS\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 77159L)
                .d("NAME", "\"O\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 77158L)
                .d("NAME", "\"NMlj\"")
            .and().insertInto("PRODUCT", 77157L)
                .d("NAME", "\"mRsXvGR\"")
            .and().insertInto("FEATURE", 77156L)
                .d("NAME", "\"oLad\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 77155L)
                .r("IN_CONFIGURATIONS_ID", 77158L)
                .r("ACTIVED_FEATURES_ID", 45752L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_62773_XYZ_b")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_62773_XYZ_b/features/MO8wmChgflOPc"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/_EM_62773_XYZ_b/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/byrBER5")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/byrBER5/features/HzOiV0AOtKtNdot"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/byrBER5/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/byrBER5")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/byrBER5/configurations/GE4hvh"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/byrBER5/features/HzOiV0AOtKtNdot"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/byrBER5/configurations/GE4hvh/features/HzOiV0AOtKtNdot"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/byrBER5/configurations/GE4hvh/features/HzOiV0AOtKtNdot"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_80_addFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_26_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_26_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2685L)
                .d("NAME", "\"UNION\"")
            .and().insertInto("FEATURE", 2684L)
                .d("NAME", "\"_EM_4289_XYZ_\"")
                .r("PRODUCT_ID", 2685L)
            .and().insertInto("PRODUCT", 2687L)
                .d("NAME", "\"beJVKfm7\"")
            .and().insertInto("FEATURE", 2686L)
                .d("NAME", "\"UUsOfUE_USUUK\"")
                .r("PRODUCT_ID", 2687L)
            .and().insertInto("PRODUCT", 2692L)
                .d("NAME", "\"_EM_9511_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2691L)
                .d("NAME", "\"_EM_9512_XYZ_\"")
            .and().insertInto("PRODUCT", 2690L)
                .d("NAME", "\"_EM_4290_XYZ_\"")
            .and().insertInto("FEATURE", 2689L)
                .d("NAME", "\"_EM_9513_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2688L)
                .r("IN_CONFIGURATIONS_ID", 2691L)
                .r("ACTIVED_FEATURES_ID", 2689L)
            .and().insertInto("PRODUCT", 2697L)
                .d("NAME", "\"_EM_9514_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2696L)
                .d("NAME", "\"623460\"")
            .and().insertInto("PRODUCT", 2695L)
                .d("NAME", "\"XST1fnicB\"")
            .and().insertInto("FEATURE", 2694L)
                .d("NAME", "\"_EM_9515_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2693L)
                .r("IN_CONFIGURATIONS_ID", 2696L)
                .r("ACTIVED_FEATURES_ID", 2686L)
            .and().insertInto("PRODUCT", 2702L)
                .d("NAME", "\"mn7ZWIxqaMeL\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2701L)
                .d("NAME", "\"KoYUpY\"")
            .and().insertInto("PRODUCT", 2700L)
                .d("NAME", "\"_EM_4293_XYZ_\"")
            .and().insertInto("FEATURE", 2699L)
                .d("NAME", "\"_EM_4294_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2698L)
                .r("IN_CONFIGURATIONS_ID", 2701L)
                .r("ACTIVED_FEATURES_ID", 2684L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/beJVKfm7")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/beJVKfm7/features/_EM_9510_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("description=BmWR")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/beJVKfm7/features/_EM_9510_XYZ_"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EM_9510_XYZ_"))
                .body("'description'", containsString("BmWR"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/UaEyWYzakxPOnI")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=f0CJ2C4m&requiredFeature=DaK9")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/UaEyWYzakxPOnI/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/Xwqw%C2%82XW")
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsResource_58_addProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_27_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_27_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 745L)
                .d("NAME", "\"_EM_1949_XYZ_\"")
            .and().insertInto("FEATURE", 744L)
                .d("NAME", "\"fyAL0mN9S\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 747L)
                .d("NAME", "\"\"")
            .and().insertInto("FEATURE", 746L)
                .d("NAME", "\"_EM_1950_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 749L)
                .d("NAME", "\"_EM_1951_XYZ_\"")
            .and().insertInto("FEATURE", 748L)
                .d("NAME", "\"_EM_1952_XYZ_\"")
                .r("PRODUCT_ID", 747L)
            .and().insertInto("PRODUCT", 751L)
                .d("NAME", "\"_EM_1953_XYZ_\"")
            .and().insertInto("FEATURE", 750L)
                .d("NAME", "\"_EM_1954_XYZ_\"")
                .r("PRODUCT_ID", 749L)
            .and().insertInto("PRODUCT", 753L)
                .d("NAME", "\"_EM_1955_XYZ_\"")
            .and().insertInto("FEATURE", 752L)
                .d("NAME", "\"_EM_1956_XYZ_\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 758L)
                .d("NAME", "\"7tw6_7Cl9\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 757L)
                .d("NAME", "\"5M0nc\"")
            .and().insertInto("PRODUCT", 756L)
                .d("NAME", "\"_EM_1957_XYZ_\"")
            .and().insertInto("FEATURE", 755L)
                .d("NAME", "\"_EM_1958_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 754L)
                .r("IN_CONFIGURATIONS_ID", 757L)
                .r("ACTIVED_FEATURES_ID", 748L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/mWFi5i63PD")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/mWFi5i63PD/features/7F4%3ESV9vbYqODvwD"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsFeaturesResource_33_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/mWFi5i63PD/features/7F4%3ESV9vbYqODvwD"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("7F4>SV9vbYqODvwD"))
                .body("'description'", nullValue());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/Sf=mh3YIIi;0")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Sf=mh3YIIi;0/configurations/_EM_1947_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=jyWNyaD9pc")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/Sf=mh3YIIi;0/features/_EM_1948_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/Sf=mh3YIIi;0/configurations/_EM_1947_XYZ_/features/_EM_1948_XYZ_"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/Sf=mh3YIIi;0/configurations/_EM_1947_XYZ_/features/_EM_1948_XYZ_"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_28_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_28_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2685L)
                .d("NAME", "\"_EM_4288_XYZ_\"")
            .and().insertInto("FEATURE", 2684L)
                .d("NAME", "\"_EM_31717_XYZ_\"")
                .r("PRODUCT_ID", 2685L)
            .and().insertInto("PRODUCT", 2687L)
                .d("NAME", "\"A6J8BCHMZuwo\"")
            .and().insertInto("FEATURE", 2686L)
                .d("NAME", "\"_EM_10230_XYZ_\"")
                .r("PRODUCT_ID", 2685L)
            .and().insertInto("PRODUCT", 2692L)
                .d("NAME", "\"Xwqw\u0082XW\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2691L)
                .d("NAME", "\"_EM_10231_XYZ_\"")
            .and().insertInto("PRODUCT", 2690L)
                .d("NAME", "\"_EM_4290_XYZ\"")
            .and().insertInto("FEATURE", 2689L)
                .d("NAME", "\"_EM_31718_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2688L)
                .r("IN_CONFIGURATIONS_ID", 2691L)
                .r("ACTIVED_FEATURES_ID", 2686L)
            .and().insertInto("PRODUCT", 2697L)
                .d("NAME", "\"kge97LhE7x2oQ\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2696L)
                .d("NAME", "\"623460\"")
            .and().insertInto("PRODUCT", 2695L)
                .d("NAME", "\"jfuex7\"")
            .and().insertInto("FEATURE", 2694L)
                .d("NAME", "\"29hstT9VSKd\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2693L)
                .r("IN_CONFIGURATIONS_ID", 2696L)
                .r("ACTIVED_FEATURES_ID", 2689L)
            .and().insertInto("PRODUCT", 2702L)
                .d("NAME", "\"mn7ZWIxqaMeL\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2701L)
                .d("NAME", "\"_EM_31719_XYZ_\"")
            .and().insertInto("PRODUCT", 2700L)
                .d("NAME", "\"_EM_4293_XYZ_\"")
            .and().insertInto("FEATURE", 2699L)
                .d("NAME", "\"702030\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2698L)
                .r("IN_CONFIGURATIONS_ID", 2691L)
                .r("ACTIVED_FEATURES_ID", 2699L)
            .and().insertInto("PRODUCT", 24619L)
                .d("NAME", "\"zenXPjs\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 24618L)
                .d("ID", "966")
            .and().insertInto("PRODUCT", 24621L)
                .d("NAME", "\"_EM_31720_XYZ_\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 24620L)
                .d("ID", "883")
            .and().insertInto("PRODUCT", 24623L)
                .d("NAME", "\"_EM_31721_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 24622L)
                .d("ID", "491")
            .and().insertInto("PRODUCT", 24625L)
                .d("NAME", "\"iv57nM\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 24624L)
                .d("ID", "-261789")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/RxlWi4VvaT76ZAhB")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/RxlWi4VvaT76ZAhB/features/talVsxtGz6cBo"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=BmWR")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/RxlWi4VvaT76ZAhB/features/_EM_31715_XYZ_"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/RxlWi4VvaT76ZAhB")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/RxlWi4VvaT76ZAhB/configurations/_EM_10226_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=NN0fdZBnGZE")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/RxlWi4VvaT76ZAhB/features/_EM_31715_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/RxlWi4VvaT76ZAhB/configurations/RxlWi4VvaT76ZAhB/features/_EM_31715_XYZ_"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/RxlWi4VvaT76ZAhB/configurations/_EM_10226_XYZ_/features/talVsxtGz6cBo"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_31716_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_31716_XYZ_/constraints/213"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    /**
    * [test_29_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_29_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2685L)
                .d("NAME", "\"_EM_9172_XYZ_\"")
            .and().insertInto("FEATURE", 2684L)
                .d("NAME", "\"_EM_9173_XYZ_\"")
                .r("PRODUCT_ID", 2685L)
            .and().insertInto("PRODUCT", 2687L)
                .d("NAME", "\"beJVKfm7\"")
            .and().insertInto("FEATURE", 2686L)
                .d("NAME", "\"l_sQfME_YSsnK\"")
                .r("PRODUCT_ID", 2687L)
            .and().insertInto("PRODUCT", 2692L)
                .d("NAME", "\"29hstT9VSKd\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2691L)
                .d("NAME", "\"ODKSwVO5\"")
            .and().insertInto("PRODUCT", 2690L)
                .d("NAME", "\"fHU\"")
            .and().insertInto("FEATURE", 2689L)
                .d("NAME", "\"yezNFn\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2688L)
                .r("IN_CONFIGURATIONS_ID", 2691L)
                .r("ACTIVED_FEATURES_ID", 2689L)
            .and().insertInto("PRODUCT", 2697L)
                .d("NAME", "\"_EM_9174_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2696L)
                .d("NAME", "\"a6\"")
            .and().insertInto("PRODUCT", 2695L)
                .d("NAME", "\"8JF9BQunvK_Ws\"")
            .and().insertInto("FEATURE", 2694L)
                .d("NAME", "\"_EM_9175_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2693L)
                .r("IN_CONFIGURATIONS_ID", 2691L)
                .r("ACTIVED_FEATURES_ID", 2684L)
            .and().insertInto("PRODUCT", 2702L)
                .d("NAME", "\"mn7ZWIxqaMeL\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 2701L)
                .d("NAME", "\"KoYUpY\"")
            .and().insertInto("PRODUCT", 2700L)
                .d("NAME", "\"_EM_9176_XYZ_\"")
            .and().insertInto("FEATURE", 2699L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2698L)
                .r("IN_CONFIGURATIONS_ID", 2701L)
                .r("ACTIVED_FEATURES_ID", 2684L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_9170_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EM_9170_XYZ_"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_9170_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=_EM_9168_XYZ_")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_9170_XYZ_/features/_E%5DM@177%5BU%5BU_"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsFeaturesResource_33_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("description=BmWR")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_9170_XYZ_/features/_E%5DM@177%5BU%5BU_"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_E]M@177[U[U_"))
                .body("'description'", containsString("BmWR"));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_EM_9170_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_EM_9170_XYZ_/configurations/_EM_9169_XYZ_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/_EM_9170_XYZ_/features/_E%5DM@177%5BU%5BU_"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/_EM_9170_XYZ_/configurations/_EM_9169_XYZ_/features/_E%5DM@177%5BU%5BU_"))
                .then()
                .statusCode(500) // org/javiermf/features/services/rest/ProductsConfigurationFeaturesResource_37_addFeatureToConfiguration
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/_EM_9170_XYZ_/configurations/_EM_9169_XYZ_/features/_E%5DM@177%5BU%5BU_"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    /**
    * [test_30_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_30_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 7804L)
                .d("NAME", "\"4lRutHiszj1t4uwh\"")
            .and().insertInto("PRODUCT", 7805L)
                .d("NAME", "\"XvGza2skYhwIEe\"")
            .and().insertInto("PRODUCT", 7806L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT", 7808L)
                .d("NAME", "\"XlFqFWxow\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7807L)
                .d("NAME", "\"RLbamf1n1oe1CqW\"")
            .and().insertInto("PRODUCT", 7810L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7809L)
                .d("NAME", "\"dgD_1jo5\"")
            .and().insertInto("PRODUCT", 7812L)
                .d("NAME", "\"a\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7811L)
                .d("NAME", "\"kEXdMypwLSavVxAY\"")
            .and().insertInto("PRODUCT", 7814L)
                .d("NAME", "\"yKCY47KM\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7813L)
                .d("NAME", "\"hjyN89Wk\"")
            .and().insertInto("PRODUCT", 7816L)
                .d("NAME", "\"y\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 7815L)
                .d("NAME", "\"Jaq0DyTQ0FUT_xHv\"")
            .and().insertInto("PRODUCT", 7818L)
                .d("NAME", "\"e\"")
            .and().insertInto("FEATURE", 7817L)
                .d("NAME", "\"LekecOrWatxGyx\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 7820L)
                .d("NAME", "\"Tmt6sZEzAR70b\"")
            .and().insertInto("FEATURE", 7819L)
                .d("NAME", "\"R\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 7822L)
                .d("NAME", "\"LHqE9kf6Pd_jWp\"")
            .and().insertInto("FEATURE", 7821L)
                .d("NAME", "\"ppJ2wLg69Rb\"")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        String location_configurationName = "";
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/M9ejALyKE5c3pfD")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/M9ejALyKE5c3pfD")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/SNL9Ug")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/SNL9Ug/configurations/Me"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_configurationName, baseUrlOfSut + "/products/SNL9Ug/configurations"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Me"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/EeLtYPl01gBlrG3/configurations/TR6sMGO24RmPC")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsConfigurationsDAO_71_deleteConfigurationForProduct
                .assertThat()
                .contentType("text/html");
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/cv_S8yDX9TSR")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("cv_S8yDX9TSR"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/D")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/D/configurations/bwLE"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/SNL9Ug/configurations/Me/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    /**
    * [test_31_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_31_with500() throws Exception {
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/F0rPgVHhNduhCK")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=aQ")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/F0rPgVHhNduhCK/features/84"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        List<InsertionDto> insertions1 = sql().insertInto("PRODUCT", 157514L)
                .d("NAME", "\"F0rPgVHhNduhCK\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 157513L)
                .d("NAME", "\"ns6Q003w1pecvhtm\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertions1result = controller.execInsertionsIntoDatabase(insertions1);
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/F0rPgVHhNduhCK")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/F0rPgVHhNduhCK/configurations/ns6Q003w1pecvhtm"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=jLAbVrh")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/F0rPgVHhNduhCK/features/84"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/F0rPgVHhNduhCK/configurations/ns6Q003w1pecvhtm/features/84"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/F0rPgVHhNduhCK/configurations/ns6Q003w1pecvhtm/features/84"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_80_addFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/F0rPgVHhNduhCK/configurations/ns6Q003w1pecvhtm/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("", hasItems("84"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/F0rPgVHhNduhCK/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("", hasItems("ns6Q003w1pecvhtm", "ns6Q003w1pecvhtm"));
        
        
        ValidatableResponse res_9 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/F0rPgVHhNduhCK")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_9.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("requiredFeature=dpB1rlFpqvjr3")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/F0rPgVHhNduhCK/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    /**
    * [test_32_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_32_with500() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/RR/configurations/tIV/features/g")
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_33_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_33_with500() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/aqO3coZz14/features/aVeW")
                .then()
                .statusCode(500) // org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_34_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_34_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 1050556L)
                .d("NAME", "\"FA2lisu2\"")
            .and().insertInto("FEATURE", 1050555L)
                .d("NAME", "\"6JLOVuJ1\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 1050558L)
                .d("NAME", "\"yxrYw\"")
            .and().insertInto("FEATURE", 1050557L)
                .d("NAME", "\"wNH2DZfep_R8P\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 1050563L)
                .d("NAME", "\"ZXMbMBDdZ3P\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1050562L)
                .d("NAME", "\"Qtpiq5rlUHWeN4\"")
            .and().insertInto("PRODUCT", 1050561L)
                .d("NAME", "\"FVf_xK4vnMMMT\"")
            .and().insertInto("FEATURE", 1050560L)
                .d("NAME", "\"47bFDtO\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1050559L)
                .r("IN_CONFIGURATIONS_ID", 1050562L)
                .r("ACTIVED_FEATURES_ID", 1050560L)
            .and().insertInto("PRODUCT", 1050568L)
                .d("NAME", "\"1Qnt2X47kR\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 1050567L)
                .d("NAME", "\"bzlRuUCQBTJ8S\"")
            .and().insertInto("PRODUCT", 1050566L)
                .d("NAME", "\"bO2_yB\"")
            .and().insertInto("FEATURE", 1050565L)
                .d("NAME", "\"BNylJBZk5Nm3\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 1050564L)
                .r("IN_CONFIGURATIONS_ID", 1050562L)
                .r("ACTIVED_FEATURES_ID", 1050557L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/CAT0PN1PRdzHQnk")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/CAT0PN1PRdzHQnk/features/4ZKw5F6GeQ"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/CAT0PN1PRdzHQnk/features?U_XYZU=C"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/CAT0PN1PRdzHQnk")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/CAT0PN1PRdzHQnk/configurations/OVtSeSVcsPxEgYF"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/CAT0PN1PRdzHQnk/features/4ZKw5F6GeQ"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/CAT0PN1PRdzHQnk/configurations/OVtSeSVcsPxEgYF/features/4ZKw5F6GeQ"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/CAT0PN1PRdzHQnk/configurations/OVtSeSVcsPxEgYF/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_7.extract().statusCode()));
        
        ValidatableResponse res_8 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/CAT0PN1PRdzHQnk")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/CAT0PN1PRdzHQnk/features/4ZKw5F6GeQ"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_64_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/CAT0PN1PRdzHQnk/features/4ZKw5F6GeQ"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    /**
    * [test_35_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_35_with500() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/VE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/VE/features/lPLwt47Kt3Slp0W"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/VE/features/lPLwt47Kt3Slp0W"))
                .then()
                .statusCode(500) // org/javiermf/features/services/ProductsService_64_addFeatureToProduct
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_36_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_36_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/9ffeYFnq2pg8u")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/9ffeYFnq2pg8u/configurations/egt53"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/9ffeYFnq2pg8u/features/QnNbhcULxdhtB"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/9ffeYFnq2pg8u/configurations/egt53/features/QnNbhcULxdhtB"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        List<InsertionDto> insertions1 = sql().insertInto("PRODUCT", 91307L)
                .d("NAME", "\"9ffeYFnq2pg8u\"")
            .dtos();
        InsertionResultsDto insertions1result = controller.execInsertionsIntoDatabase(insertions1);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/9ffeYFnq2pg8u/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("", hasItems("egt53", "egt53"));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/9ffeYFnq2pg8u/constraints/713")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/9ffeYFnq2pg8u/features/QnNbhcULxdhtB")
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_6.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("", hasItems("9ffeYFnq2pg8u", "9ffeYFnq2pg8u"));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/9ffeYFnq2pg8u")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=izpr")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/9ffeYFnq2pg8u/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    /**
    * [test_37_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_37_with500() throws Exception {
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        List<InsertionDto> insertions0 = sql().insertInto("PRODUCT", 91753L)
                .d("NAME", "\"_VOw90wahkksMa\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 91752L)
                .d("ID", "394")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "\"NVH57I79Q\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertions0result = controller.execInsertionsIntoDatabase(insertions0);
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/_VOw90wahkksMa/constraints/394")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/_VOw90wahkksMa/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_VOw90wahkksMa")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=vY")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_VOw90wahkksMa/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_VOw90wahkksMa")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_4.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_VOw90wahkksMa/configurations/7GhDC0vBfYCnpwY"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/_VOw90wahkksMa")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("", hasItems("_VOw90wahkksMa", "_VOw90wahkksMa"));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/_VOw90wahkksMa")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_9 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/_VOw90wahkksMa/configurations/7GhDC0vBfYCnpwY"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_9.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_10 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/_VOw90wahkksMa/features/SejqH0Lks0Ve"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_10.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/_VOw90wahkksMa/configurations/7GhDC0vBfYCnpwY/features/SejqH0Lks0Ve"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    /**
    * [test_38_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * LastLine_0
    */
    @Test(timeout = 60000)
    public void test_38_with500() throws Exception {
        
        String location_productName = "";
        String location_configurationName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/137PQf44pi7aEb")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/137PQf44pi7aEb/configurations/HaAk59"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/137PQf44pi7aEb/features/xGX7x"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/137PQf44pi7aEb/configurations/HaAk59/features/xGX7x"))
                .then()
                .statusCode(500) // org/javiermf/features/models/Product_75_findProductFeatureByName
                .assertThat()
                .contentType("text/html");
        
    }


}
