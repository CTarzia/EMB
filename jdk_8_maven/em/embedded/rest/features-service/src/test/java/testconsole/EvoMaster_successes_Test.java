package testconsole;

import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-08-22T19:56:20.136-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 17 tests
 * <br>
 * Covered targets: 306
 * <br>
 * Used time: 0h 0m 10s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/swagger.json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'swagger'", containsString("2.0"))
                .body("'info'.'version'", containsString("1.0"))
                .body("'basePath'", containsString("/"))
                .body("'schemes'.size()", equalTo(1))
                .body("'schemes'", hasItems("http"))
                .body("'paths'.'/products/{productName}/features'.'get'.'operationId'", containsString("getFeaturesForProduct"))
                .body("'paths'.'/products/{productName}/features'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'schema'.'uniqueItems'", equalTo(true))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'schema'.'items'.'$ref'", containsString("#/definitions/Feature"))
                .body("'paths'.'/products/{productName}/features'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'operationId'", containsString("addFeatureToProduct"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[1].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[2].'name'", containsString("description"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[2].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[2].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'parameters'[2].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'operationId'", containsString("updateFeatureOfProduct"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[1].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[2].'name'", containsString("description"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[2].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[2].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'parameters'[2].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Feature"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'put'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'operationId'", containsString("deleteFeatureOfProduct"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[1].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/features/{featureName}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products'.'get'.'operationId'", containsString("getAllProducts"))
                .body("'paths'.'/products'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products'.'get'.'parameters'.size()", equalTo(0))
                .body("'paths'.'/products'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products'.'get'.'responses'.'200'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/products'.'get'.'responses'.'200'.'schema'.'items'.'type'", containsString("string"))
                .body("'paths'.'/products'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}'.'get'.'operationId'", containsString("getProductByName"))
                .body("'paths'.'/products/{productName}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Product"))
                .body("'paths'.'/products/{productName}'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}'.'post'.'operationId'", containsString("addProduct"))
                .body("'paths'.'/products/{productName}'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}'.'delete'.'operationId'", containsString("deleteProductByName"))
                .body("'paths'.'/products/{productName}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'operationId'", containsString("getConfigurationWithNameForProduct"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/ProductConfiguration"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'operationId'", containsString("addConfiguration"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'operationId'", containsString("deleteConfiguration"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'operationId'", containsString("addFeatureToConfiguration"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'.size()", equalTo(5))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[2].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[2].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[2].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'parameters'[2].'type'", containsString("string"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'operationId'", containsString("deleteFeature"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'.size()", equalTo(5))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[2].'name'", containsString("featureName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[2].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[2].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'parameters'[2].'type'", containsString("string"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features/{featureName}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'operationId'", containsString("getConfigurationActivedFeatures"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'.size()", equalTo(4))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[1].'name'", containsString("configurationName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[2].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[2].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[2].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'parameters'[2].'type'", containsString("string"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'responses'.'200'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'responses'.'200'.'schema'.'items'.'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations/{configurationName}/features'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'operationId'", containsString("getConfigurationsForProduct"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'responses'.'200'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'responses'.'200'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'responses'.'200'.'schema'.'items'.'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/configurations'.'get'.'responses'.'200'.'headers'.isEmpty()", is(true))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'operationId'", containsString("deleteConstraint"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'name'", containsString("constraintId"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'type'", containsString("integer"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'parameters'[1].'format'", containsString("int64"))
                .body("'paths'.'/products/{productName}/constraints/{constraintId}'.'delete'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'operationId'", containsString("addRequiresConstraintToProduct"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[1].'name'", containsString("sourceFeature"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[1].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[1].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[2].'name'", containsString("requiredFeature"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[2].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[2].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'parameters'[2].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/requires'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'operationId'", containsString("addExcludesConstraintToProduct"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'produces'", hasItems("application/json"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[0].'name'", containsString("productName"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[0].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[1].'name'", containsString("sourceFeature"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[1].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[1].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[1].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[2].'name'", containsString("excludedFeature"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[2].'in'", containsString("formData"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[2].'required'", equalTo(false))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'parameters'[2].'type'", containsString("string"))
                .body("'paths'.'/products/{productName}/constraints/excludes'.'post'.'responses'.'default'.'description'", containsString("successful operation"))
                .body("'definitions'.'ProductsFeaturesResource'.'type'", containsString("object"))
                .body("'definitions'.'Feature'.'type'", containsString("object"))
                .body("'definitions'.'Feature'.'properties'.'name'.'type'", containsString("string"))
                .body("'definitions'.'Feature'.'properties'.'description'.'type'", containsString("string"))
                .body("'definitions'.'FeatureConstraint'.'type'", containsString("object"))
                .body("'definitions'.'FeatureConstraint'.'properties'.'type'.'type'", containsString("string"))
                .body("'definitions'.'Product'.'type'", containsString("object"))
                .body("'definitions'.'Product'.'properties'.'name'.'type'", containsString("string"))
                .body("'definitions'.'Product'.'properties'.'features'.'type'", containsString("array"))
                .body("'definitions'.'Product'.'properties'.'features'.'readOnly'", equalTo(true))
                .body("'definitions'.'Product'.'properties'.'features'.'uniqueItems'", equalTo(true))
                .body("'definitions'.'Product'.'properties'.'features'.'items'.'$ref'", containsString("#/definitions/Feature"))
                .body("'definitions'.'Product'.'properties'.'constraints'.'type'", containsString("array"))
                .body("'definitions'.'Product'.'properties'.'constraints'.'readOnly'", equalTo(true))
                .body("'definitions'.'Product'.'properties'.'constraints'.'uniqueItems'", equalTo(true))
                .body("'definitions'.'Product'.'properties'.'constraints'.'items'.'$ref'", containsString("#/definitions/FeatureConstraint"))
                .body("'definitions'.'ProductsConfigurationResource'.'type'", containsString("object"))
                .body("'definitions'.'ProductsConfigurationFeaturesResource'.'type'", containsString("object"))
                .body("'definitions'.'ProductConfiguration'.'type'", containsString("object"))
                .body("'definitions'.'ProductConfiguration'.'properties'.'name'.'type'", containsString("string"))
                .body("'definitions'.'ProductConfiguration'.'properties'.'valid'.'type'", containsString("boolean"))
                .body("'definitions'.'ProductConfiguration'.'properties'.'activedFeatures'.'type'", containsString("array"))
                .body("'definitions'.'ProductConfiguration'.'properties'.'activedFeatures'.'uniqueItems'", equalTo(true))
                .body("'definitions'.'ProductConfiguration'.'properties'.'activedFeatures'.'items'.'$ref'", containsString("#/definitions/Feature"))
                .body("'definitions'.'ProductsConstraintsResource'.'type'", containsString("object"));
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/LYV")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/LYV")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("LYV"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/Q84HaF5tlqhS")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/Q84HaF5tlqhS/configurations/KeDj4O"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/Q84HaF5tlqhS/configurations/KeDj4O"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("KeDj4O"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 1L)
                .d("NAME", "\"iysV5ipZmTGl\"")
            .and().insertInto("FEATURE", 0L)
                .d("NAME", "\"5c9Fb\"")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 6L)
                .d("NAME", "\"uatM00RmO\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 5L)
                .d("NAME", "\"tWW4VdBOYVLBK\"")
            .and().insertInto("PRODUCT", 4L)
                .d("NAME", "\"TuYqQa6C9NHAy\"")
            .and().insertInto("FEATURE", 3L)
                .d("NAME", "\"vESf0T8fx9S\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 2L)
                .r("IN_CONFIGURATIONS_ID", 5L)
                .r("ACTIVED_FEATURES_ID", 3L)
            .and().insertInto("PRODUCT", 16L)
                .d("NAME", "\"PapWW\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 15L)
                .d("ID", "496")
            .and().insertInto("PRODUCT", 18L)
                .d("NAME", "\"hmWtiOnlHpmFVWs\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 17L)
                .d("ID", "415")
            .and().insertInto("PRODUCT", 20L)
                .d("NAME", "\"YqAUf\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 19L)
                .d("ID", "170")
            .and().insertInto("PRODUCT", 22L)
                .d("NAME", "\"oVt0qELA12d\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 21L)
                .d("ID", "643")
            .and().insertInto("PRODUCT", 24L)
                .d("NAME", "\"\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 23L)
                .d("ID", "517")
            .and().insertInto("PRODUCT", 26L)
                .d("NAME", "\"a6\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 25L)
                .d("ID", "448")
            .and().insertInto("PRODUCT", 28L)
                .d("NAME", "\"V\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 27L)
                .d("ID", "898")
            .and().insertInto("PRODUCT", 30L)
                .d("NAME", "\"VoiIM_KVL91mueZ\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 29L)
                .d("ID", "638")
            .and().insertInto("PRODUCT", 32L)
                .d("NAME", "\"B1fMq\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 31L)
                .d("ID", "648")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/Vf")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/Vf/constraints/69"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/2svGeD")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=YE")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/2svGeD/features/22"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/2svGeD/features/22"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(14))
                .body("", hasItems("iysV5ipZmTGl", "uatM00RmO", "TuYqQa6C9NHAy", "PapWW", "hmWtiOnlHpmFVWs", "YqAUf", "oVt0qELA12d", "", "a6", "V", "VoiIM_KVL91mueZ", "B1fMq", "Vf", "2svGeD"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/BqxH/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/E0ggEg88S0")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/E0ggEg88S0/features/XdtM"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/E0ggEg88S0/features/XdtM"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("XdtM"))
                .body("'description'", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/7OTe_S6F6Yed")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/7OTe_S6F6Yed/features/X"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/NB5IVoJtXBKqt2N")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/NB5IVoJtXBKqt2N/configurations/uR0eTITJUXp"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/NB5IVoJtXBKqt2N/configurations/uR0eTITJUXp"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/L")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/L")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/yFMFcZbjD2Fi5")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/55XWTg9eRcBzmlZ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=H0Gu&excludedFeature=0AT")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/55XWTg9eRcBzmlZ/constraints/excludes"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/o")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/o/configurations/KcH1vupifsaj"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/p0N3")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=xeQysoVOv&requiredFeature=")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/p0N3/constraints/requires"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/2svGeD")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=YE")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/2svGeD/features/22"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/2svGeD/features/22"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/eiyr2YGC/configurations/6sc4sv")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/_c8rkSkvw5lOm/constraints/297")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }


}
