import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-09-15T09:42:24.750-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 2 tests
 * <br>
 * Covered targets: 96
 * <br>
 * Used time: 0h 1m 0s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 135L)
                .d("NAME", "\"JIvE\"")
            .and().insertInto("FEATURE", 134L)
                .d("NAME", "\"gv8CKMwRujh\"")
                .r("PRODUCT_ID", 135L)
            .and().insertInto("PRODUCT", 140L)
                .d("NAME", "\"D1y\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 139L)
                .d("NAME", "\"Xy5stspKD\"")
            .and().insertInto("PRODUCT", 138L)
                .d("NAME", "\"dHRE0W5Qw\"")
            .and().insertInto("FEATURE", 137L)
                .d("NAME", "\"C\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 136L)
                .r("IN_CONFIGURATIONS_ID", 139L)
                .r("ACTIVED_FEATURES_ID", 134L)
            .and().insertInto("PRODUCT", 145L)
                .d("NAME", "\"GtxPnJu\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 144L)
                .d("NAME", "\"4Gig4UCmK77C\"")
            .and().insertInto("PRODUCT", 143L)
                .d("NAME", "\"_EM_53_XYZ_\"")
            .and().insertInto("FEATURE", 142L)
                .d("NAME", "\"4PXqS\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 141L)
                .r("IN_CONFIGURATIONS_ID", 144L)
                .r("ACTIVED_FEATURES_ID", 137L)
            .and().insertInto("PRODUCT", 150L)
                .d("NAME", "\"sYt\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 149L)
                .d("NAME", "\"z\"")
            .and().insertInto("PRODUCT", 148L)
                .d("NAME", "\"mMehl9K\"")
            .and().insertInto("FEATURE", 147L)
                .d("NAME", "\"M\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 146L)
                .r("IN_CONFIGURATIONS_ID", 149L)
                .r("ACTIVED_FEATURES_ID", 142L)
            .and().insertInto("PRODUCT", 155L)
                .d("NAME", "\"_EM_54_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 154L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT", 153L)
                .d("NAME", "\"QC\"")
            .and().insertInto("FEATURE", 152L)
                .d("NAME", "\"U4HnEvXZeh0o9v\"")
            .and().insertInto("PRODUCT_CONFIGURATION_ACTIVED_FEATURES", 151L)
                .r("IN_CONFIGURATIONS_ID", 149L)
                .r("ACTIVED_FEATURES_ID", 152L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        String location_configurationName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/cNEEYlQ4eITsyF")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=i")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/cNEEYlQ4eITsyF/features/nTgK_mq9Ac_qqoF"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/cNEEYlQ4eITsyF/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/cNEEYlQ4eITsyF")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_3.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/cNEEYlQ4eITsyF/configurations/k97yNOkaO4"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/cNEEYlQ4eITsyF/configurations/k97yNOkaO4"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("k97yNOkaO4"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
        
        ValidatableResponse res_6 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/cNEEYlQ4eITsyF")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_6.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_7 = given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/cNEEYlQ4eITsyF/configurations/k97yNOkaO4"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_configurationName = res_7.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName));
        
        
        ValidatableResponse res_8 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_configurationName, baseUrlOfSut + "/products/cNEEYlQ4eITsyF/features/nTgK_mq9Ac_qqoF"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_8.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        given().accept("*/*")
                .post(resolveLocation(location_featureName, baseUrlOfSut + "/products/cNEEYlQ4eITsyF/configurations/k97yNOkaO4/features/nTgK_mq9Ac_qqoF"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(resolveLocation(location_featureName, baseUrlOfSut + "/products/cNEEYlQ4eITsyF/configurations/k97yNOkaO4/features/nTgK_mq9Ac_qqoF"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_productName = "";
        String location_featureName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/rQFhFmBwhJ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/rQFhFmBwhJ/features/bviEtazaLq"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_featureName = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_featureName));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .get(resolveLocation(location_featureName, baseUrlOfSut + "/products/rQFhFmBwhJ/features"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
    }


}
